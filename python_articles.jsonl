{"instruction": "Write a Python decorator that retries a function up to 3 times if it raises a specific exception, and logs each retry", "code": "import time\r\nimport logging\r\n\r\ndef retry_on_exception(exception, retries=3):\r\n    def decorator(func):\r\n        def wrapper(*args, **kwargs):\r\n            for attempt in range(retries):\r\n                try:\r\n                    return func(*args, **kwargs)\r\n                except exception as e:\r\n                    logging.warning(f\"Retry {attempt + 1} due to: {e}\")\r\n                    time.sleep(1)\r\n            raise exception(\"Max retries exceeded.\")\r\n        return wrapper\r\n    return decorator"}
{"instruction": "Write a Python decorator that retries a function up to 3 times if it raises a specific exception, and logs each retry", "code": "import time\r\nimport logging\r\n\r\ndef retry_on_exception(exception, retries=3):\r\n    def decorator(func):\r\n        def wrapper(*args, **kwargs):\r\n            for attempt in range(retries):\r\n                try:\r\n                    return func(*args, **kwargs)\r\n                except exception as e:\r\n                    logging.warning(f\"Retry {attempt + 1} due to: {e}\")\r\n                    time.sleep(1)\r\n            raise exception(\"Max retries exceeded.\")\r\n        return wrapper\r\n    return decorator"}
