# Task: Write a Python decorator that retries a function up to 3 times if it raises a specific exception, and logs each retry
import time
import logging

def retry_on_exception(exception, retries=3):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for attempt in range(retries):
                try:
                    return func(*args, **kwargs)
                except exception as e:
                    logging.warning(f"Retry {attempt + 1} due to: {e}")
                    time.sleep(1)
            raise exception("Max retries exceeded.")
        return wrapper
    return decorator

# Task: Write a Python decorator that retries a function up to 3 times if it raises a specific exception, and logs each retry
import time
import logging

def retry_on_exception(exception, retries=3):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for attempt in range(retries):
                try:
                    return func(*args, **kwargs)
                except exception as e:
                    logging.warning(f"Retry {attempt + 1} due to: {e}")
                    time.sleep(1)
            raise exception("Max retries exceeded.")
        return wrapper
    return decorator

