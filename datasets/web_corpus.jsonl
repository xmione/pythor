{"url": "https://realpython.com/python-web-scraping-practical-introduction", "content": "A Practical Introduction to Web Scraping in Python – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\n/\nJoin\nSign‑In\n— FREE Email Series —\n🐍 Python Tricks 💌\nGet Python Tricks »\n🔒 No spam. Unsubscribe any time.\nBrowse Topics\nGuided Learning Paths\nBasics\nIntermediate\nAdvanced\napi\nbest-practices\ncareer\ncommunity\ndatabases\ndata-science\ndata-structures\ndata-viz\ndevops\ndjango\ndocker\neditors\nflask\nfront-end\ngamedev\ngui\nmachine-learning\nnumpy\nprojects\npython\ntesting\ntools\nweb-dev\nweb-scraping\nTable of Contents\nScrape and Parse Text From Websites\nBuild Your First Web Scraper\nExtract Text From HTML With String Methods\nGet to Know Regular Expressions\nExtract Text From HTML With Regular Expressions\nCheck Your Understanding\nUse an HTML Parser for Web Scraping in Python\nInstall Beautiful Soup\nCreate a BeautifulSoup Object\nUse a BeautifulSoup Object\nCheck Your Understanding\nInteract With HTML Forms\nInstall MechanicalSoup\nCreate a Browser Object\nSubmit a Form With MechanicalSoup\nCheck Your Understanding\nInteract With Websites in Real Time\nConclusion\nAdditional Resources\nFrequently Asked Questions\nMark as Completed\nShare\nRecommended Video Course\nIntroduction to Web Scraping With Python\nA Practical Introduction to Web Scraping in Python\nby\nDavid Amos\nPublication date\nDec 21, 2024\nReading time estimate\n38m\nintermediate\nweb-scraping\nMark as Completed\nShare\nTable of Contents\nScrape and Parse Text From Websites\nBuild Your First Web Scraper\nExtract Text From HTML With String Methods\nGet to Know Regular Expressions\nExtract Text From HTML With Regular Expressions\nCheck Your Understanding\nUse an HTML Parser for Web Scraping in Python\nInstall Beautiful Soup\nCreate a BeautifulSoup Object\nUse a BeautifulSoup Object\nCheck Your Understanding\nInteract With HTML Forms\nInstall MechanicalSoup\nCreate a Browser Object\nSubmit a Form With MechanicalSoup\nCheck Your Understanding\nInteract With Websites in Real Time\nConclusion\nAdditional Resources\nFrequently Asked Questions\nRemove ads\nWatch Now\nThis tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding:\nIntroduction to Web Scraping With Python\nPython web scraping allows you to collect and parse data from websites programmatically. With powerful libraries like\nurllib\n, Beautiful Soup, and MechanicalSoup, you can fetch and manipulate HTML content effortlessly. By automating data collection tasks, Python makes web scraping both efficient and effective.\nBy the end of this tutorial, you’ll understand that:\nPython is\nwell-suited for web scraping\ndue to its\nextensive libraries\n, such as Beautiful Soup and MechanicalSoup.\nYou can scrape websites with Python by\nfetching HTML content\nusing\nurllib\nand\nextracting data\nusing string methods or parsers like Beautiful Soup.\nBeautiful Soup\nis a great choice for\nparsing HTML\ndocuments with Python effectively.\nData scraping may be illegal\nif it violates a website’s terms of use, so always review the website’s acceptable use policy.\nThis tutorial guides you through extracting data from websites using string methods, regular expressions, and HTML parsers.\nNote:\nThis tutorial is adapted from the chapter “Interacting With the Web” in\nPython Basics: A Practical Introduction to Python 3\n.\nThe book uses Python’s built-in\nIDLE\neditor to create and edit Python files and interact with the Python shell, so you’ll see occasional references to IDLE throughout this tutorial. However, you should have no problems running the example code from the\neditor\nand\nenvironment\nof your choice.\nSource Code:\nClick here to download the free source code\nthat you’ll use to collect and parse data from the Web.\nTake the Quiz:\nTest your knowledge with our interactive “A Practical Introduction to Web Scraping in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:\nInteractive Quiz\nA Practical Introduction to Web Scraping in Python\nIn this quiz, you'll test your understanding of web scraping in Python. Web scraping is a powerful tool for data collection and analysis. By working through this quiz, you'll revisit how to parse website data using string methods, regular expressions, and HTML parsers, as well as how to interact with forms and other website components.\nScrape and Parse Text From Websites\nCollecting data from websites using an automated process is known as web scraping. Some websites explicitly forbid users from scraping their data with automated tools like the ones that you’ll create in this tutorial. Websites do this for two possible reasons:\nThe site has a good reason to protect its data. For instance, Google Maps doesn’t let you request too many results too quickly.\nMaking many repeated requests to a website’s server may use up bandwidth, slowing down the website for other users and potentially overloading the server such that the website stops responding entirely.\nBefore using your Python skills for web scraping, you should always check your target website’s acceptable use policy to see if accessing the website with automated tools is a violation of its terms of use. Legally, web scraping against the wishes of a website is very much a gray area.\nImportant:\nPlease be aware that the following techniques\nmay be illegal\nwhen used on websites that prohibit web scraping.\nFor this tutorial, you’ll use a page that’s hosted on Real Python’s server. The page that you’ll access has been set up for use with this tutorial.\nNow that you’ve read the disclaimer, you can get to the fun stuff. In the next section, you’ll start grabbing all the HTML code from a single web page.\nRemove ads\nBuild Your First Web Scraper\nOne useful package for web scraping that you can find in Python’s\nstandard library\nis\nurllib\n, which contains tools for working with URLs. In particular, the\nurllib.request\nmodule contains a function called\nurlopen()\nthat you can use to open a URL within a program.\nIn IDLE’s interactive window, type the following to import\nurlopen()\n:\nPython\n>>>\nfrom\nurllib.request\nimport\nurlopen\nThe web page that you’ll open is at the following URL:\nPython\n>>>\nurl\n=\n\"http://olympus.realpython.org/profiles/aphrodite\"\nTo open the web page, pass\nurl\nto\nurlopen()\n:\nPython\n>>>\npage\n=\nurlopen\n(\nurl\n)\nurlopen()\nreturns an\nHTTPResponse\nobject:\nPython\n>>>\npage\n<http.client.HTTPResponse object at 0x105fef820>\nTo extract the HTML from the page, first use the\nHTTPResponse\nobject’s\n.read()\nmethod, which returns a sequence of bytes. Then use\n.decode()\nto decode the bytes to a string using\nUTF-8\n:\nPython\n>>>\nhtml_bytes\n=\npage\n.\nread\n()\n>>>\nhtml\n=\nhtml_bytes\n.\ndecode\n(\n\"utf-8\"\n)\nNow you can\nprint\nthe HTML to see the contents of the web page:\nPython\n>>>\nprint\n(\nhtml\n)\n<html>\n<head>\n<title>Profile: Aphrodite</title>\n</head>\n<body bgcolor=\"yellow\">\n<center>\n<br><br>\n<img src=\"/static/aphrodite.gif\" />\n<h2>Name: Aphrodite</h2>\n<br><br>\nFavorite animal: Dove\n<br><br>\nFavorite color: Red\n<br><br>\nHometown: Mount Olympus\n</center>\n</body>\n</html>\nThe output that you’re seeing is the\nHTML code\nof the website, which your browser renders when you visit\nhttp://olympus.realpython.org/profiles/aphrodite\n:\nWith\nurllib\n, you accessed the website similarly to how you would in your browser. However, instead of rendering the content visually, you grabbed the source code as text. Now that you have the HTML as text, you can extract information from it in a couple of different ways.\nExtract Text From HTML With String Methods\nOne way to extract information from a web page’s HTML is to use\nstring methods\n. For instance, you can use\n.find()\nto search through the text of the HTML for the\n<title>\ntags and extract the title of the web page.\nTo start, you’ll extract the title of the web page that you requested in the previous example. If you know the index of the first character of the title and the index of the first character of the closing\n</title>\ntag, then you can use a\nstring slice\nto extract the title.\nBecause\n.find()\nreturns the index of the first occurrence of a\nsubstring\n, you can get the index of the opening\n<title>\ntag by passing the string\n\"<title>\"\nto\n.find()\n:\nPython\n>>>\ntitle_index\n=\nhtml\n.\nfind\n(\n\"<title>\"\n)\n>>>\ntitle_index\n14\nYou don’t want the index of the\n<title>\ntag, though. You want the index of the title itself. To get the index of the first letter in the title, you can add the length of the string\n\"<title>\"\nto\ntitle_index\n:\nPython\n>>>\nstart_index\n=\ntitle_index\n+\nlen\n(\n\"<title>\"\n)\n>>>\nstart_index\n21\nNow get the index of the closing\n</title>\ntag by passing the string\n\"</title>\"\nto\n.find()\n:\nPython\n>>>\nend_index\n=\nhtml\n.\nfind\n(\n\"</title>\"\n)\n>>>\nend_index\n39\nFinally, you can extract the title by slicing the\nhtml\nstring:\nPython\n>>>\ntitle\n=\nhtml\n[\nstart_index\n:\nend_index\n]\n>>>\ntitle\n'Profile: Aphrodite'\nReal-world HTML can be much more complicated and far less predictable than the HTML on the Aphrodite profile page. Here’s\nanother profile page\nwith some messier HTML that you can scrape:\nPython\n>>>\nurl\n=\n\"http://olympus.realpython.org/profiles/poseidon\"\nTry extracting the title from this new URL using the same method as in the previous example:\nPython\n>>>\nurl\n=\n\"http://olympus.realpython.org/profiles/poseidon\"\n>>>\npage\n=\nurlopen\n(\nurl\n)\n>>>\nhtml\n=\npage\n.\nread\n()\n.\ndecode\n(\n\"utf-8\"\n)\n>>>\nstart_index\n=\nhtml\n.\nfind\n(\n\"<title>\"\n)\n+\nlen\n(\n\"<title>\"\n)\n>>>\nend_index\n=\nhtml\n.\nfind\n(\n\"</title>\"\n)\n>>>\ntitle\n=\nhtml\n[\nstart_index\n:\nend_index\n]\n>>>\ntitle\n'\\n<head>\\n<title >Profile: Poseidon'\nWhoops! There’s a bit of HTML mixed in with the title. Why’s that?\nThe HTML for the\n/profiles/poseidon\npage looks similar to the\n/profiles/aphrodite\npage, but there’s a small difference. The opening\n<title>\ntag has an extra space before the closing angle bracket (\n>\n), rendering it as\n<title >\n.\nhtml.find(\"<title>\")\nreturns\n-1\nbecause the exact substring\n\"<title>\"\ndoesn’t exist. When\n-1\nis added to\nlen(\"<title>\")\n, which is\n7\n, the\nstart_index\nvariable is assigned the value\n6\n.\nThe character at index\n6\nof the string\nhtml\nis a newline character (\n\\n\n) right before the opening angle bracket (\n<\n) of the\n<head>\ntag. This means that\nhtml[start_index:end_index]\nreturns all the HTML starting with that newline and ending just before the\n</title>\ntag.\nThese sorts of problems can occur in countless unpredictable ways. You need a more reliable way to extract text from HTML.\nRemove ads\nGet to Know Regular Expressions\nRegular expressions\n—or\nregexes\nfor short—are patterns that you can use to search for text within a string. Python supports regular expressions through the standard library’s\nre\nmodule.\nNote:\nRegular expressions aren’t particular to Python. They’re a general programming concept and are supported in many programming languages.\nTo work with regular expressions, the first thing that you need to do is import the\nre\nmodule:\nPython\n>>>\nimport\nre\nRegular expressions use special characters called\nmetacharacters\nto denote different patterns. For instance, the asterisk character (\n*\n) stands for zero or more instances of whatever comes just before the asterisk.\nIn the following example, you use\n.findall()\nto find any text within a string that matches a given regular expression:\nPython\n>>>\nre\n.\nfindall\n(\n\"ab*c\"\n,\n\"ac\"\n)\n['ac']\nThe first argument of\nre.findall()\nis the regular expression that you want to match, and the second argument is the string to test. In the above example, you search for the pattern\n\"ab*c\"\nin the string\n\"ac\"\n.\nThe regular expression\n\"ab*c\"\nmatches any part of the string that begins with\n\"a\"\n, ends with\n\"c\"\n, and has zero or more instances of\n\"b\"\nbetween the two.\nre.findall()\nreturns a\nlist\nof all matches. The string\n\"ac\"\nmatches this pattern, so it’s returned in the list.\nHere’s the same pattern applied to different strings:\nPython\n>>>\nre\n.\nfindall\n(\n\"ab*c\"\n,\n\"abcd\"\n)\n['abc']\n>>>\nre\n.\nfindall\n(\n\"ab*c\"\n,\n\"acc\"\n)\n['ac']\n>>>\nre\n.\nfindall\n(\n\"ab*c\"\n,\n\"abcac\"\n)\n['abc', 'ac']\n>>>\nre\n.\nfindall\n(\n\"ab*c\"\n,\n\"abdc\"\n)\n[]\nNotice that if no match is found, then\n.findall()\nreturns an empty list.\nPattern matching is case sensitive. If you want to match this pattern regardless of the case, then you can pass a third argument with the value\nre.IGNORECASE\n:\nPython\n>>>\nre\n.\nfindall\n(\n\"ab*c\"\n,\n\"ABC\"\n)\n[]\n>>>\nre\n.\nfindall\n(\n\"ab*c\"\n,\n\"ABC\"\n,\nre\n.\nIGNORECASE\n)\n['ABC']\nYou can use a period (\n.\n) to stand for any single character in a regular expression. For instance, you could find all the strings that contain the letters\n\"a\"\nand\n\"c\"\nseparated by a single character as follows:\nPython\n>>>\nre\n.\nfindall\n(\n\"a.c\"\n,\n\"abc\"\n)\n['abc']\n>>>\nre\n.\nfindall\n(\n\"a.c\"\n,\n\"abbc\"\n)\n[]\n>>>\nre\n.\nfindall\n(\n\"a.c\"\n,\n\"ac\"\n)\n[]\n>>>\nre\n.\nfindall\n(\n\"a.c\"\n,\n\"acc\"\n)\n['acc']\nThe pattern\n.*\ninside a regular expression stands for any character repeated any number of times. For instance, you can use\n\"a.*c\"\nto find every substring that starts with\n\"a\"\nand ends with\n\"c\"\n, regardless of which letter—or letters—are in between:\nPython\n>>>\nre\n.\nfindall\n(\n\"a.*c\"\n,\n\"abc\"\n)\n['abc']\n>>>\nre\n.\nfindall\n(\n\"a.*c\"\n,\n\"abbc\"\n)\n['abbc']\n>>>\nre\n.\nfindall\n(\n\"a.*c\"\n,\n\"ac\"\n)\n['ac']\n>>>\nre\n.\nfindall\n(\n\"a.*c\"\n,\n\"acc\"\n)\n['acc']\nOften, you use\nre.search()\nto search for a particular pattern inside a string. This function is somewhat more complicated than\nre.findall()\nbecause it returns an object called\nMatchObject\nthat stores different groups of data. This is because there might be matches inside other matches, and\nre.search()\nreturns every possible result.\nThe details of\nMatchObject\nare irrelevant here. For now, just know that calling\n.group()\non\nMatchObject\nwill return the first and most inclusive result, which in most cases is just what you want:\nPython\n>>>\nmatch_results\n=\nre\n.\nsearch\n(\n\"ab*c\"\n,\n\"ABC\"\n,\nre\n.\nIGNORECASE\n)\n>>>\nmatch_results\n.\ngroup\n()\n'ABC'\nThere’s one more function in the\nre\nmodule that’s useful for parsing out text.\nre.sub()\n, which is short for\nsubstitute\n, allows you to replace the text in a string that matches a regular expression with new text. It behaves sort of like the\n.replace()\nstring method.\nThe arguments passed to\nre.sub()\nare the regular expression, followed by the replacement text, followed by the string. Here’s an example:\nPython\n>>>\nstring\n=\n\"Everything is <replaced> if it's in <tags>.\"\n>>>\nstring\n=\nre\n.\nsub\n(\n\"<.*>\"\n,\n\"ELEPHANTS\"\n,\nstring\n)\n>>>\nstring\n'Everything is ELEPHANTS.'\nPerhaps that wasn’t quite what you expected to happen.\nre.sub()\nuses the regular expression\n\"<.*>\"\nto find and replace everything between the first\n<\nand the last\n>\n, which spans from the beginning of\n<replaced>\nto the end of\n<tags>\n. This is because Python’s regular expressions are\ngreedy\n, meaning they try to find the longest possible match when characters like\n*\nare used.\nAlternatively, you can use the non-greedy matching pattern\n*?\n, which works the same way as\n*\nexcept that it matches the shortest possible string of text:\nPython\n>>>\nstring\n=\n\"Everything is <replaced> if it's in <tags>.\"\n>>>\nstring\n=\nre\n.\nsub\n(\n\"<.*?>\"\n,\n\"ELEPHANTS\"\n,\nstring\n)\n>>>\nstring\n\"Everything is ELEPHANTS if it's in ELEPHANTS.\"\nThis time,\nre.sub()\nfinds two matches,\n<replaced>\nand\n<tags>\n, and substitutes the string\n\"ELEPHANTS\"\nfor both matches.\nRemove ads\nExtract Text From HTML With Regular Expressions\nEquipped with all this knowledge, now try to parse out the title from\nanother profile page\n, which includes this rather carelessly written line of HTML:\nHTML\n<\nTITLE\n>\nProfile: Dionysus\n<\n/title  / >\nThe\n.find()\nmethod would have a difficult time dealing with the inconsistencies here, but with the clever use of regular expressions, you can handle this code quickly and efficiently:\nPython\nregex_soup.py\nimport\nre\nfrom\nurllib.request\nimport\nurlopen\nurl\n=\n\"http://olympus.realpython.org/profiles/dionysus\"\npage\n=\nurlopen\n(\nurl\n)\nhtml\n=\npage\n.\nread\n()\n.\ndecode\n(\n\"utf-8\"\n)\npattern\n=\n\"<title.*?>.*?</title.*?>\"\nmatch_results\n=\nre\n.\nsearch\n(\npattern\n,\nhtml\n,\nre\n.\nIGNORECASE\n)\ntitle\n=\nmatch_results\n.\ngroup\n()\ntitle\n=\nre\n.\nsub\n(\n\"<.*?>\"\n,\n\"\"\n,\ntitle\n)\n# Remove HTML tags\nprint\n(\ntitle\n)\nTake a closer look at the first regular expression in the\npattern\nstring by breaking it down into three parts:\n<title.*?>\nmatches the opening\n<TITLE >\ntag in\nhtml\n. The\n<title\npart of the pattern matches with\n<TITLE\nbecause\nre.search()\nis called with\nre.IGNORECASE\n, and\n.*?>\nmatches any text after\n<TITLE\nup to the first instance of\n>\n.\n.*?\nnon-greedily matches all text after the opening\n<TITLE >\n, stopping at the first match for\n</title.*?>\n.\n</title.*?>\ndiffers from the first pattern only in its use of the\n/\ncharacter, so it matches the closing\n</title  / >\ntag in\nhtml\n.\nThe second regular expression, the string\n\"<.*?>\"\n, also uses the non-greedy\n.*?\nto match all the HTML tags in the\ntitle\nstring. By replacing any matches with\n\"\"\n,\nre.sub()\nremoves all the tags and returns only the text.\nNote:\nWeb scraping in Python or any other language can be tedious. No two websites are organized the same way, and HTML is often messy. Moreover, websites change over time. Web scrapers that work today aren’t guaranteed to work next year—or next week, for that matter!\nRegular expressions are a powerful tool when used correctly. In this introduction, you’ve barely scratched the surface. For more about regular expressions and how to use them, check out the two-part series\nRegular Expressions: Regexes in Python\n.\nCheck Your Understanding\nExpand the block below to check your understanding.\nExercise: Scrape Data From a Website\nShow/Hide\nWrite a program that grabs the full HTML from the following URL:\nPython\n>>>\nurl\n=\n\"http://olympus.realpython.org/profiles/dionysus\"\nThen use\n.find()\nto display the text following\nName:\nand\nFavorite Color:\n(not including any leading spaces or trailing HTML tags that might appear on the same line).\nYou can expand the block below to see a solution.\nSolution: Scrape Data From a Website\nShow/Hide\nFirst, import the\nurlopen\nfunction from the\nurlib.request\nmodule:\nPython\nfrom\nurllib.request\nimport\nurlopen\nThen open the URL and use the\n.read()\nmethod of the\nHTTPResponse\nobject returned by\nurlopen()\nto read the page’s HTML:\nPython\nurl\n=\n\"http://olympus.realpython.org/profiles/dionysus\"\nhtml_page\n=\nurlopen\n(\nurl\n)\nhtml_text\n=\nhtml_page\n.\nread\n()\n.\ndecode\n(\n\"utf-8\"\n)\nThe\n.read()\nmethod returns a byte string, so you use\n.decode()\nto decode the bytes using the UTF-8 encoding.\nNow that you have the HTML source of the web page as a string assigned to the\nhtml_text\nvariable, you can extract Dionysus’s name and favorite color from his profile. The structure of the HTML for Dionysus’s profile is the same as for Aphrodite’s profile, which you saw earlier.\nYou can get the name by finding the string\n\"Name:\"\nin the text and extracting everything that comes after the first occurence of the string and before the next HTML tag. That is, you need to extract everything after the colon (\n:\n) and before the first angle bracket (\n<\n). You can use the same technique to extract the favorite color.\nThe following\nfor\nloop\nextracts this text for both the name and favorite color:\nPython\nfor\nstring\nin\n[\n\"Name: \"\n,\n\"Favorite Color:\"\n]:\nstring_start_idx\n=\nhtml_text\n.\nfind\n(\nstring\n)\ntext_start_idx\n=\nstring_start_idx\n+\nlen\n(\nstring\n)\nnext_html_tag_offset\n=\nhtml_text\n[\ntext_start_idx\n:]\n.\nfind\n(\n\"<\"\n)\ntext_end_idx\n=\ntext_start_idx\n+\nnext_html_tag_offset\nraw_text\n=\nhtml_text\n[\ntext_start_idx\n:\ntext_end_idx\n]\nclean_text\n=\nraw_text\n.\nstrip\n(\n\"\n\\r\\n\\t\n\"\n)\nprint\n(\nclean_text\n)\nIt looks like there’s a lot going on in this\nfor\nloop, but it’s just a little bit of arithmetic to calculate the right indices for extracting the desired text. Go ahead and break it down:\nYou use\nhtml_text.find()\nto find the starting index of the string, either\n\"Name:\"\nor\n\"Favorite Color:\"\n, and then assign the index to\nstring_start_idx\n.\nSince the text to extract starts just after the colon in\n\"Name:\"\nor\n\"Favorite Color:\"\n, you get the index of the character immediately after the colon by adding the length of the string to\nstart_string_idx\n, and then assign the result to\ntext_start_idx\n.\nYou calculate the ending index of the text to extract by determining the index of the first angle bracket (\n<\n) relative to\ntext_start_idx\nand assign this value to\nnext_html_tag_offset\n. Then you add that value to\ntext_start_idx\nand assign the result to\ntext_end_idx\n.\nYou extract the text by slicing\nhtml_text\nfrom\ntext_start_idx\nto\ntext_end_idx\nand assign this string to\nraw_text\n.\nYou remove any whitespace from the beginning and end of\nraw_text\nusing\n.strip()\nand assign the result to\nclean_text\n.\nAt the end of the loop, you use\nprint()\nto display the extracted text. The final output looks like this:\nShell\nDionysus\nWine\nThis solution is one of many that solves this problem, so if you got the same output with a different solution, then you did great!\nWhen you’re ready, you can move on to the next section.\nUse an HTML Parser for Web Scraping in Python\nAlthough regular expressions are great for pattern matching in general, sometimes it’s easier to use an HTML parser that’s explicitly designed for parsing out HTML pages. There are many Python tools written for this purpose, but the\nBeautiful Soup\nlibrary is a good one to start with.\nInstall Beautiful Soup\nTo install Beautiful Soup, you can run the following in your\nterminal\n:\nShell\n$\npython\n-m\npip\ninstall\nbeautifulsoup4\nWith this command, you’re installing the latest version of Beautiful Soup into your global Python environment.\nRemove ads\nCreate a\nBeautifulSoup\nObject\nType the following program into a new editor window:\nPython\nbeauty_soup.py\nfrom\nbs4\nimport\nBeautifulSoup\nfrom\nurllib.request\nimport\nurlopen\nurl\n=\n\"http://olympus.realpython.org/profiles/dionysus\"\npage\n=\nurlopen\n(\nurl\n)\nhtml\n=\npage\n.\nread\n()\n.\ndecode\n(\n\"utf-8\"\n)\nsoup\n=\nBeautifulSoup\n(\nhtml\n,\n\"html.parser\"\n)\nThis program does three things:\nOpens the URL\nhttp://olympus.realpython.org/profiles/dionysus\nby using\nurlopen()\nfrom the\nurllib.request\nmodule\nReads the HTML from the page as a string and assigns it to the\nhtml\nvariable\nCreates a\nBeautifulSoup\nobject and assigns it to the\nsoup\nvariable\nThe\nBeautifulSoup\nobject assigned to\nsoup\nis created with two arguments. The first argument is the HTML to be parsed, and the second argument, the string\n\"html.parser\"\n, tells the object which parser to use behind the scenes.\n\"html.parser\"\nrepresents Python’s built-in HTML parser.\nUse a\nBeautifulSoup\nObject\nSave and run the above program. When it’s finished running, you can use the\nsoup\nvariable in the interactive window to parse the content of\nhtml\nin various ways.\nNote:\nIf you’re not using IDLE, then you can run your program with the\n-i\nflag to enter interactive mode. Something like\npython -i beauty_soup.py\nwill first run your program and then leave you in a REPL where you can explore your objects.\nFor example,\nBeautifulSoup\nobjects have a\n.get_text()\nmethod that you can use to extract all the text from the document and automatically remove any HTML tags.\nType the following code into IDLE’s interactive window or at the end of the code in your editor:\nPython\n>>>\nprint\n(\nsoup\n.\nget_text\n())\nProfile: Dionysus\nName: Dionysus\nHometown: Mount Olympus\nFavorite animal: Leopard\nFavorite Color: Wine\nThere are a lot of blank lines in this output. These are the result of newline characters in the HTML document’s text. You can remove them with the\n.replace()\nstring method if you need to.\nOften, you need to get only specific text from an HTML document. Using Beautiful Soup first to extract the text and then using the\n.find()\nstring method is sometimes easier than working with regular expressions.\nHowever, other times the HTML tags themselves are the elements that point out the data you want to retrieve. For instance, perhaps you want to retrieve the URLs for all the images on the page. These links are contained in the\nsrc\nattribute of\n<img>\nHTML tags.\nIn this case, you can use\nfind_all()\nto return a list of all instances of that particular tag:\nPython\n>>>\nsoup\n.\nfind_all\n(\n\"img\"\n)\n[<img src=\"/static/dionysus.jpg\"/>, <img src=\"/static/grapes.png\"/>]\nThis returns a list of all\n<img>\ntags in the HTML document. The objects in the list look like they might be strings representing the tags, but they’re actually instances of the\nTag\nobject provided by Beautiful Soup.\nTag\nobjects provide a simple interface for working with the information they contain.\nYou can explore this a little by first unpacking the\nTag\nobjects from the list:\nPython\n>>>\nimage1\n,\nimage2\n=\nsoup\n.\nfind_all\n(\n\"img\"\n)\nEach\nTag\nobject has a\n.name\nproperty that returns a string containing the HTML tag type:\nPython\n>>>\nimage1\n.\nname\n'img'\nYou can access the HTML attributes of the\nTag\nobject by putting their names between square brackets, just as if the attributes were keys in a dictionary.\nFor example, the\n<img src=\"/static/dionysus.jpg\"/>\ntag has a single attribute,\nsrc\n, with the value\n\"/static/dionysus.jpg\"\n. Likewise, an HTML tag such as the link\n<a href=\"https://realpython.com\" target=\"_blank\">\nhas two attributes,\nhref\nand\ntarget\n.\nTo get the source of the images in the Dionysus profile page, you access the\nsrc\nattribute using the dictionary notation mentioned above:\nPython\n>>>\nimage1\n[\n\"src\"\n]\n'/static/dionysus.jpg'\n>>>\nimage2\n[\n\"src\"\n]\n'/static/grapes.png'\nCertain tags in HTML documents can be accessed by properties of the\nTag\nobject. For example, to get the\n<title>\ntag in a document, you can use the\n.title\nproperty:\nPython\n>>>\nsoup\n.\ntitle\n<title>Profile: Dionysus</title>\nIf you look at the source of the Dionysus profile by navigating to the\nprofile page\n, right-clicking on the page, and selecting\nView page source\n, then you’ll notice that the\n<title>\ntag is written in all caps with spaces:\nBeautiful Soup automatically cleans up the tags for you by removing the extra space in the opening tag and the extraneous forward slash (\n/\n) in the closing tag.\nYou can also retrieve just the string between the title tags with the\n.string\nproperty of the\nTag\nobject:\nPython\n>>>\nsoup\n.\ntitle\n.\nstring\n'Profile: Dionysus'\nOne of the features of Beautiful Soup is the ability to search for specific kinds of tags whose attributes match certain values. For example, if you want to find all the\n<img>\ntags that have a\nsrc\nattribute equal to the value\n/static/dionysus.jpg\n, then you can provide the following additional argument to\n.find_all()\n:\nPython\n>>>\nsoup\n.\nfind_all\n(\n\"img\"\n,\nsrc\n=\n\"/static/dionysus.jpg\"\n)\n[<img src=\"/static/dionysus.jpg\"/>]\nThis example is somewhat arbitrary, and the usefulness of this technique may not be apparent from the example. If you spend some time browsing various websites and viewing their page sources, then you’ll notice that many websites have extremely complicated HTML structures.\nWhen scraping data from websites with Python, you’re often interested in particular parts of the page. By spending some time looking through the HTML document, you can identify tags with unique attributes that you can use to extract the data you need.\nThen, instead of relying on complicated regular expressions or using\n.find()\nto search through the document, you can directly access the particular tag that you’re interested in and extract the data you need.\nIn some cases, you may find that Beautiful Soup doesn’t offer the functionality you need. The\nlxml\nlibrary is somewhat trickier to get started with but offers far more flexibility than Beautiful Soup for parsing HTML documents. You may want to check it out once you’re comfortable using Beautiful Soup.\nNote:\nHTML parsers like Beautiful Soup can save you a lot of time and effort when it comes to locating specific data in web pages. However, sometimes HTML is so poorly written and disorganized that even a sophisticated parser like Beautiful Soup can’t interpret the HTML tags properly.\nIn this case, you’re often left with using\n.find()\nand regular expression techniques to try to parse out the information that you need.\nBeautiful Soup is great for scraping data from a website’s HTML, but it doesn’t provide any way to work with HTML forms. For example, if you need to search a website for some query and then scrape the results, then Beautiful Soup alone won’t get you very far.\nRemove ads\nCheck Your Understanding\nExpand the block below to check your understanding.\nExercise: Parse HTML With Beautiful Soup\nShow/Hide\nWrite a program that grabs the full HTML from the\npage\nat the URL\nhttp://olympus.realpython.org/profiles\n.\nUsing Beautiful Soup, print out a list of all the links on the page by looking for HTML tags with the name\na\nand retrieving the value taken on by the\nhref\nattribute of each tag.\nThe final output should look like this:\nShell\nhttp://olympus.realpython.org/profiles/aphrodite\nhttp://olympus.realpython.org/profiles/poseidon\nhttp://olympus.realpython.org/profiles/dionysus\nMake sure that you only have one slash (\n/\n) between the base URL and the relative URL.\nYou can expand the block below to see a solution:\nSolution: Parse HTML With Beautiful Soup\nShow/Hide\nFirst, import the\nurlopen\nfunction from the\nurlib.request\nmodule and the\nBeautifulSoup\nclass from the\nbs4\npackage:\nPython\nfrom\nurllib.request\nimport\nurlopen\nfrom\nbs4\nimport\nBeautifulSoup\nEach link URL on the\n/profiles\npage is a\nrelative URL\n, so create a\nbase_url\nvariable with the base URL of the website:\nPython\nbase_url\n=\n\"http://olympus.realpython.org\"\nYou can build a full URL by concatenating\nbase_url\nwith a relative URL.\nNow open the\n/profiles\npage with\nurlopen()\nand use\n.read()\nto get the HTML source:\nPython\nhtml_page\n=\nurlopen\n(\nbase_url\n+\n\"/profiles\"\n)\nhtml_text\n=\nhtml_page\n.\nread\n()\n.\ndecode\n(\n\"utf-8\"\n)\nWith the HTML source downloaded and decoded, you can create a new\nBeautifulSoup\nobject to parse the HTML:\nPython\nsoup\n=\nBeautifulSoup\n(\nhtml_text\n,\n\"html.parser\"\n)\nsoup.find_all(\"a\")\nreturns a list of all the links in the HTML source. You can loop over this list to print out all the links on the web page:\nPython\nfor\nlink\nin\nsoup\n.\nfind_all\n(\n\"a\"\n):\nlink_url\n=\nbase_url\n+\nlink\n[\n\"href\"\n]\nprint\n(\nlink_url\n)\nYou can access the relative URL for each link through the\n\"href\"\nsubscript. Concatenate this value with\nbase_url\nto create the full\nlink_url\n.\nWhen you’re ready, you can move on to the next section.\nInteract With HTML Forms\nThe\nurllib\nmodule that you’ve been working with so far in this tutorial is well suited for requesting the contents of a web page. Sometimes, though, you need to interact with a web page to obtain the content you need. For example, you might need to submit a form or click a button to display hidden content.\nNote:\nThis tutorial is adapted from the chapter “Interacting With the Web” in\nPython Basics: A Practical Introduction to Python 3\n. If you enjoy what you’re reading, then be sure to check out\nthe rest of the book\n.\nThe Python standard library doesn’t provide a built-in means for working with web pages interactively, but many third-party packages are available from\nPyPI\n. Among these,\nMechanicalSoup\nis a popular and relatively straightforward package to use.\nIn essence, MechanicalSoup installs what’s known as a\nheadless browser\n, which is a web browser with no graphical user interface. This browser is controlled programmatically via a Python program.\nInstall MechanicalSoup\nYou can install MechanicalSoup with\npip\nin your terminal:\nShell\n$\npython\n-m\npip\ninstall\nMechanicalSoup\nYou’ll need to close and restart your IDLE session for MechanicalSoup to load and be recognized after it’s been installed.\nCreate a\nBrowser\nObject\nType the following into IDLE’s interactive window:\nPython\n>>>\nimport\nmechanicalsoup\n>>>\nbrowser\n=\nmechanicalsoup\n.\nBrowser\n()\nBrowser\nobjects represent the headless web browser. You can use them to request a page from the Internet by passing a URL to their\n.get()\nmethod:\nPython\n>>>\nurl\n=\n\"http://olympus.realpython.org/login\"\n>>>\npage\n=\nbrowser\n.\nget\n(\nurl\n)\npage\nis a\nResponse\nobject that stores the response from requesting the URL from the browser:\nPython\n>>>\npage\n<Response [200]>\nThe number\n200\nrepresents the\nstatus code\nreturned by the request. A status code of\n200\nmeans that the request was successful. An unsuccessful request might show a status code of\n404\nif the URL doesn’t exist or\n500\nif there’s a server error when making the request.\nMechanicalSoup uses Beautiful Soup to parse the HTML from the request, and\npage\nhas a\n.soup\nattribute that represents a\nBeautifulSoup\nobject:\nPython\n>>>\ntype\n(\npage\n.\nsoup\n)\n<class 'bs4.BeautifulSoup'>\nYou can view the HTML by inspecting the\n.soup\nattribute:\nPython\n>>>\npage\n.\nsoup\n<html>\n<head>\n<title>Log In</title>\n</head>\n<body bgcolor=\"yellow\">\n<center>\n<br/><br/>\n<h2>Please log in to access Mount Olympus:</h2>\n<br/><br/>\n<form action=\"/login\" method=\"post\" name=\"login\">\nUsername: <input name=\"user\" type=\"text\"/><br/>\nPassword: <input name=\"pwd\" type=\"password\"/><br/><br/>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n</center>\n</body>\n</html>\nNotice this page has a\n<form>\non it with\n<input>\nelements for a username and a password.\nRemove ads\nSubmit a Form With MechanicalSoup\nOpen the\n/login\npage from the previous example in a browser and look at it yourself before moving on:\nTry typing in a random username and password combination. If you guess incorrectly, then the message\nWrong username or password!\nis displayed at the bottom of the page.\nHowever, if you provide the correct login credentials, then you’re redirected to the\n/profiles\npage:\nUsername\nPassword\nzeus\nThunderDude\nIn the next example, you’ll see how to use MechanicalSoup to fill out and submit this form using Python!\nThe important section of HTML code is the login form—that is, everything inside the\n<form>\ntags. The\n<form>\non this page has the\nname\nattribute set to\nlogin\n. This form contains two\n<input>\nelements, one named\nuser\nand the other named\npwd\n. The third\n<input>\nelement is the\nSubmit\nbutton.\nNow that you know the underlying structure of the login form, as well as the credentials needed to log in, take a look at a program that fills the form out and submits it.\nIn a new editor window, type in the following program:\nPython\nimport\nmechanicalsoup\n# 1\nbrowser\n=\nmechanicalsoup\n.\nBrowser\n()\nurl\n=\n\"http://olympus.realpython.org/login\"\nlogin_page\n=\nbrowser\n.\nget\n(\nurl\n)\nlogin_html\n=\nlogin_page\n.\nsoup\n# 2\nform\n=\nlogin_html\n.\nselect\n(\n\"form\"\n)[\n0\n]\nform\n.\nselect\n(\n\"input\"\n)[\n0\n][\n\"value\"\n]\n=\n\"zeus\"\nform\n.\nselect\n(\n\"input\"\n)[\n1\n][\n\"value\"\n]\n=\n\"ThunderDude\"\n# 3\nprofiles_page\n=\nbrowser\n.\nsubmit\n(\nform\n,\nlogin_page\n.\nurl\n)\nSave the file and press\nF5\nto run it. To confirm that you’ve successfully logged in, type the following into the interactive window:\nPython\n>>>\nprofiles_page\n.\nurl\n'http://olympus.realpython.org/profiles'\nNow break down the above example:\nYou create a\nBrowser\ninstance and use it to request the URL\nhttp://olympus.realpython.org/login\n. You assign the HTML content of the page to the\nlogin_html\nvariable using the\n.soup\nproperty.\nlogin_html.select(\"form\")\nreturns a list of all\n<form>\nelements on the page. Because the page has only one\n<form>\nelement, you can access the form by retrieving the element at index\n0\nof the list. When there is only one form on a page, you may also use\nlogin_html.form\n. The next two lines select the username and password inputs and set their value to\n\"zeus\"\nand\n\"ThunderDude\"\n, respectively.\nYou submit the form with\nbrowser.submit()\n. Notice that you pass two arguments to this method, the\nform\nobject and the URL of the\nlogin_page\n, which you access via\nlogin_page.url\n.\nIn the interactive window, you confirm that the submission successfully redirected to the\n/profiles\npage. If something had gone wrong, then the value of\nprofiles_page.url\nwould still be\n\"http://olympus.realpython.org/login\"\n.\nNote:\nHackers can use automated programs like the one above to\nbrute force\nlogins by rapidly trying many different usernames and passwords until they find a working combination.\nBesides this being highly illegal, almost all websites these days lock you out and report your IP address if they see you making too many failed requests, so don’t try it!\nNow that you have the\nprofiles_page\nvariable set, it’s time to programmatically obtain the URL for each link on the\n/profiles\npage.\nTo do this, you use\n.select()\nagain, this time passing the string\n\"a\"\nto select all the\n<a>\nanchor elements on the page:\nPython\n>>>\nlinks\n=\nprofiles_page\n.\nsoup\n.\nselect\n(\n\"a\"\n)\nNow you can iterate over each link and print the\nhref\nattribute:\nPython\n>>>\nfor\nlink\nin\nlinks\n:\n...\naddress\n=\nlink\n[\n\"href\"\n]\n...\ntext\n=\nlink\n.\ntext\n...\nprint\n(\nf\n\"\n{\ntext\n}\n:\n{\naddress\n}\n\"\n)\n...\nAphrodite: /profiles/aphrodite\nPoseidon: /profiles/poseidon\nDionysus: /profiles/dionysus\nThe URLs contained in each\nhref\nattribute are relative URLs, which aren’t very helpful if you want to navigate to them later using MechanicalSoup. If you happen to know the full URL, then you can assign the portion needed to construct a full URL.\nIn this case, the base URL is just\nhttp://olympus.realpython.org\n. Then you can concatenate the base URL with the relative URLs found in the\nsrc\nattribute:\nPython\n>>>\nbase_url\n=\n\"http://olympus.realpython.org\"\n>>>\nfor\nlink\nin\nlinks\n:\n...\naddress\n=\nbase_url\n+\nlink\n[\n\"href\"\n]\n...\ntext\n=\nlink\n.\ntext\n...\nprint\n(\nf\n\"\n{\ntext\n}\n:\n{\naddress\n}\n\"\n)\n...\nAphrodite: http://olympus.realpython.org/profiles/aphrodite\nPoseidon: http://olympus.realpython.org/profiles/poseidon\nDionysus: http://olympus.realpython.org/profiles/dionysus\nYou can do a lot with just\n.get()\n,\n.select()\n, and\n.submit()\n. That said, MechanicalSoup is capable of much more. To learn more about MechanicalSoup, check out the\nofficial docs\n.\nRemove ads\nCheck Your Understanding\nExpand the block below to check your understanding\nExercise: Submit a Form With MechanicalSoup\nShow/Hide\nUse MechanicalSoup to provide the correct username (\nzeus\n) and password (\nThunderDude\n) to the\nlogin form\nlocated at the URL\nhttp://olympus.realpython.org/login\n.\nOnce the form is submitted, display the title of the current page to determine that you’ve been redirected to the\n/profiles\npage.\nYour program should print the text\n<title>All Profiles</title>\n.\nYou can expand the block below to see a solution.\nSolution: Submit a Form With MechanicalSoup\nShow/Hide\nFirst, import the\nmechanicalsoup\npackage and create a\nBroswer\nobject:\nPython\nimport\nmechanicalsoup\nbrowser\n=\nmechanicalsoup\n.\nBrowser\n()\nPoint the browser to the login page by passing the URL to\nbrowser.get()\nand grab the HTML with the\n.soup\nattribute:\nPython\nlogin_url\n=\n\"http://olympus.realpython.org/login\"\nlogin_page\n=\nbrowser\n.\nget\n(\nlogin_url\n)\nlogin_html\n=\nlogin_page\n.\nsoup\nlogin_html\nis a\nBeautifulSoup\ninstance. Because the page has only a single form on it, you can access the form via\nlogin_html.form\n. Using\n.select()\n, select the username and password inputs and fill them with the username\n\"zeus\"\nand the password\n\"ThunderDude\"\n:\nPython\nform\n=\nlogin_html\n.\nform\nform\n.\nselect\n(\n\"input\"\n)[\n0\n][\n\"value\"\n]\n=\n\"zeus\"\nform\n.\nselect\n(\n\"input\"\n)[\n1\n][\n\"value\"\n]\n=\n\"ThunderDude\"\nNow that the form is filled out, you can submit it with\nbrowser.submit()\n:\nPython\nprofiles_page\n=\nbrowser\n.\nsubmit\n(\nform\n,\nlogin_page\n.\nurl\n)\nIf you filled the form with the correct username and password, then\nprofiles_page\nshould actually point to the\n/profiles\npage. You can confirm this by printing the title of the page assigned to\nprofiles_page:\nPython\nprint\n(\nprofiles_page\n.\nsoup\n.\ntitle\n)\nYou should see the following text displayed:\nShell\n<title>All Profiles</title>\nIf instead you see the text\nLog In\nor something else, then the form submission failed.\nWhen you’re ready, you can move on to the next section.\nInteract With Websites in Real Time\nSometimes you want to be able to fetch real-time data from a website that offers continually updated information.\nIn the dark days before you learned Python programming, you had to sit in front of a browser, clicking the\nRefresh\nbutton to reload the page each time you wanted to check if updated content was available. But now you can automate this process using the\n.get()\nmethod of the MechanicalSoup\nBrowser\nobject.\nOpen your browser of choice and navigate to the URL\nhttp://olympus.realpython.org/dice\n:\nThis\n/dice\npage simulates a roll of a six-sided die, updating the result each time you refresh the browser. Below, you’ll write a program that repeatedly scrapes the page for a new result.\nThe first thing you need to do is determine which element on the page contains the result of the die roll. Do this now by right-clicking anywhere on the page and selecting\nView page source\n. A little more than halfway down the HTML code is an\n<h2>\ntag that looks like this:\nHTML\n<\nh2\nid\n=\n\"result\"\n>\n3\n</\nh2\n>\nThe text of the\n<h2>\ntag might be different for you, but this is the page element you need for scraping the result.\nNote:\nFor this example, you can easily check that there’s only one element on the page with\nid=\"result\"\n. Although the\nid\nattribute is supposed to be unique, in practice you should always check that the element you’re interested in is uniquely identified.\nNow start by writing a simple program that opens the\n/dice\npage, scrapes the result, and prints it to the console:\nPython\nmech_soup.py\nimport\nmechanicalsoup\nbrowser\n=\nmechanicalsoup\n.\nBrowser\n()\npage\n=\nbrowser\n.\nget\n(\n\"http://olympus.realpython.org/dice\"\n)\ntag\n=\npage\n.\nsoup\n.\nselect\n(\n\"#result\"\n)[\n0\n]\nresult\n=\ntag\n.\ntext\nprint\n(\nf\n\"The result of your dice roll is:\n{\nresult\n}\n\"\n)\nThis example uses the\nBeautifulSoup\nobject’s\n.select()\nmethod to find the element with\nid=result\n. The string\n\"#result\"\n, which you pass to\n.select()\n, uses the\nCSS ID selector\n#\nto indicate that\nresult\nis an\nid\nvalue.\nTo periodically get a new result, you’ll need to create a loop that loads the page at each step. So everything below the line\nbrowser = mechanicalsoup.Browser()\nin the above code needs to go in the body of the loop.\nFor this example, you want four rolls of the dice at ten-second intervals. To do that, the last line of your code needs to tell Python to pause running for ten seconds. You can do this with\n.sleep()\nfrom Python’s\ntime\nmodule\n. The\n.sleep()\nmethod takes a single argument that represents the amount of time to sleep in seconds.\nHere’s an example that illustrates how\nsleep()\nworks:\nPython\nimport\ntime\nprint\n(\n\"I'm about to wait for five seconds...\"\n)\ntime\n.\nsleep\n(\n5\n)\nprint\n(\n\"Done waiting!\"\n)\nWhen you run this code, you’ll see that the\n\"Done waiting!\"\nmessage isn’t displayed until five seconds have passed from when the first\nprint()\nfunction was executed.\nFor the die roll example, you’ll need to pass the number\n10\nto\nsleep()\n. Here’s the updated program:\nPython\nmech_soup.py\nimport\ntime\nimport\nmechanicalsoup\nbrowser\n=\nmechanicalsoup\n.\nBrowser\n()\nfor\ni\nin\nrange\n(\n4\n):\npage\n=\nbrowser\n.\nget\n(\n\"http://olympus.realpython.org/dice\"\n)\ntag\n=\npage\n.\nsoup\n.\nselect\n(\n\"#result\"\n)[\n0\n]\nresult\n=\ntag\n.\ntext\nprint\n(\nf\n\"The result of your dice roll is:\n{\nresult\n}\n\"\n)\ntime\n.\nsleep\n(\n10\n)\nWhen you run the program, you’ll immediately see the first result printed to the console. After ten seconds, the second result is displayed, then the third, and finally the fourth. What happens after the fourth result is printed?\nThe program continues running for another ten seconds before it finally stops. That’s kind of a waste of time! You can stop it from doing this by using an\nif\nstatement\nto run\ntime.sleep()\nfor only the first three requests:\nPython\nmech_soup.py\nimport\ntime\nimport\nmechanicalsoup\nbrowser\n=\nmechanicalsoup\n.\nBrowser\n()\nfor\ni\nin\nrange\n(\n4\n):\npage\n=\nbrowser\n.\nget\n(\n\"http://olympus.realpython.org/dice\"\n)\ntag\n=\npage\n.\nsoup\n.\nselect\n(\n\"#result\"\n)[\n0\n]\nresult\n=\ntag\n.\ntext\nprint\n(\nf\n\"The result of your dice roll is:\n{\nresult\n}\n\"\n)\n# Wait 10 seconds if this isn't the last request\nif\ni\n<\n3\n:\ntime\n.\nsleep\n(\n10\n)\nWith techniques like this, you can scrape data from websites that periodically update their data. However, you should be aware that requesting a page multiple times in rapid succession can be seen as suspicious, or even malicious, use of a website.\nImportant:\nMost websites publish a Terms of Use document. You can often find a link to it in the website’s footer.\nAlways read this document before attempting to scrape data from a website. If you can’t find the Terms of Use, then try to contact the website owner and ask them if they have any policies regarding request volume.\nFailure to comply with the Terms of Use could result in your IP being blocked, so be careful!\nIt’s even possible to crash a server with an excessive number of requests, so you can imagine that many websites are concerned about the volume of requests to their server! Always check the Terms of Use and be respectful when sending multiple requests to a website.\nRemove ads\nConclusion\nAlthough it’s possible to parse data from the Web using tools in Python’s standard library, there are many tools on PyPI that can help simplify the process.\nIn this tutorial, you learned how to:\nRequest a web page using Python’s built-in\nurllib\nmodule\nParse HTML using\nBeautiful Soup\nInteract with web forms using\nMechanicalSoup\nRepeatedly request data from a website to\ncheck for updates\nWriting automated web scraping programs is fun, and the Internet has no shortage of content that can lead to all sorts of exciting projects.\nJust remember, not everyone wants you pulling data from their web servers. Always check a website’s Terms of Use before you start scraping, and be respectful about how you time your web requests so that you don’t flood a server with traffic.\nSource Code:\nClick here to download the free source code\nthat you’ll use to collect and parse data from the Web.\nAdditional Resources\nFor more information on web scraping with Python, check out the following resources:\nBeautiful Soup: Build a Web Scraper With Python\nAPI Integration in Python\nPython & APIs: A Winning Combo for Reading Public Data\nNote:\nIf you enjoyed what you learned in this sample from\nPython Basics: A Practical Introduction to Python 3\n, then be sure to check out\nthe rest of the book\n.\nTake the Quiz:\nTest your knowledge with our interactive “A Practical Introduction to Web Scraping in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:\nInteractive Quiz\nA Practical Introduction to Web Scraping in Python\nIn this quiz, you'll test your understanding of web scraping in Python. Web scraping is a powerful tool for data collection and analysis. By working through this quiz, you'll revisit how to parse website data using string methods, regular expressions, and HTML parsers, as well as how to interact with forms and other website components.\nFrequently Asked Questions\nNow that you have some experience with web scraping in Python, you can use the questions and answers below to check your understanding and recap what you’ve learned.\nThese FAQs are related to the most important concepts you’ve covered in this tutorial. Click the\nShow/Hide\ntoggle beside each question to reveal the answer.\nIs Python good for web scraping?\nShow/Hide\nYes, Python is a popular choice for web scraping due to its ease of use and the availability of powerful libraries like Beautiful Soup and MechanicalSoup that simplify the process.\nHow can you scrape websites with Python?\nShow/Hide\nYou can scrape websites with Python by using libraries like\nurllib\nto fetch HTML, Beautiful Soup to parse HTML, and MechanicalSoup to interact with web forms.\nIs data scraping illegal?\nShow/Hide\nData scraping can be illegal if it violates a website’s terms of service or involves accessing data without permission. Always check the website’s acceptable use policy before scraping.\nWhat tools can you use for parsing HTML in Python?\nShow/Hide\nYou can use tools such as Beautiful Soup and\nlxml\nto parse HTML in Python. These libraries make it easy to navigate and extract data from HTML documents.\nHow can you handle forms in web scraping?\nShow/Hide\nYou can handle forms in web scraping using MechanicalSoup, which allows you to fill out and submit forms programmatically within a headless browser session.\nMark as Completed\nShare\nWatch Now\nThis tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding:\nIntroduction to Web Scraping With Python\n🐍 Python Tricks 💌\nGet a short & sweet\nPython Trick\ndelivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team.\nSend Me Python Tricks »\nAbout\nDavid Amos\nDavid is a writer, programmer, and mathematician passionate about exploring mathematics through code.\n» More about David\nEach tutorial at Real Python is created by a team of developers so that it meets our high quality standards. The team members who worked on this tutorial are:\nAldren\nGeir Arne\nJoanna\nJacob\nKate\nMartin\nPhilipp\nMaster\nReal-World Python Skills\nWith Unlimited Access to Real Python\nJoin us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas:\nLevel Up Your Python Skills »\nMaster\nReal-World Python Skills\nWith Unlimited Access to Real Python\nJoin us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas:\nLevel Up Your Python Skills »\nWhat Do You Think?\nRate this article:\nLinkedIn\nTwitter\nBluesky\nFacebook\nEmail\nWhat’s your #1 takeaway or favorite thing you learned? How are you going to put your newfound skills to use? Leave a comment below and let us know.\nCommenting Tips:\nThe most useful comments are those written with the goal of learning from or helping out other students.\nGet tips for asking good questions\nand\nget answers to common questions in our support portal\n.\nLooking for a real-time conversation? Visit the\nReal Python Community Chat\nor join the next\n“Office Hours” Live Q&A Session\n. Happy Pythoning!\nKeep Learning\nRelated Topics:\nintermediate\nweb-scraping\nRecommended Video Course:\nIntroduction to Web Scraping With Python\nRelated Tutorials:\nBeautiful Soup: Build a Web Scraper With Python\nModern Web Automation With Python and Selenium\nIntroduction to Python SQL Libraries\nWorking With JSON Data in Python\nPython Virtual Environments: A Primer\nKeep reading Real Python by creating a free account or signing in:\nContinue »\nAlready have an account?\nSign-In\nAlmost there! Complete this form and click the button below to gain instant access:\n×\nA Practical Introduction to Web Scraping in Python (Source Code)\nSend Code »\n🔒 No spam. We take your privacy seriously.\nLearn Python\nStart Here\nLearning Resources\nCode Mentor\nPython Reference\nSupport Center\nCourses & Paths\nLearning Paths\nQuizzes & Exercises\nBrowse Topics\nWorkshops\nBooks\nCommunity\nPodcast\nNewsletter\nCommunity Chat\nOffice Hours\nLearner Stories\nMembership\nPlans & Pricing\nTeam Plans\nFor Business\nFor Schools\nReviews\nCompany\nAbout Us\nTeam\nSponsorships\nCareers\nPress Kit\nMerch\nPrivacy Policy\n⋅\nTerms of Use\n⋅\nSecurity\n⋅\nContact\nHappy Pythoning!\n© 2012–2025 DevCademy Media Inc. DBA Real Python. All rights reserved.\nREALPYTHON™ is a trademark of DevCademy Media Inc."}
{"url": "https://www.geeksforgeeks.org/python-programming-language", "content": "Python Tutorial - Learn Python Programming Language - GeeksforGeeks\nSkip to content\nTutorials\nPython\nJava\nData Structures & Algorithms\nML & Data Science\nInterview Corner\nProgramming Languages\nWeb Development\nCS Subjects\nDevOps And Linux\nSoftware and Tools\nSchool Learning\nPractice Coding Problems\nCourses\nDSA to Development\nGet IBM Certification\nNewly Launched!\nMaster Django Framework\nBecome AWS Certified\nFor Working Professionals\nInterview 101: DSA & System Design\nData Science Training Program\nJAVA Backend Development (Live)\nDevOps Engineering (LIVE)\nData Structures & Algorithms in Python\nFor Students\nPlacement Preparation Course\nData Science (Live)\nData Structure & Algorithm-Self Paced (C++/JAVA)\nMaster Competitive Programming (Live)\nFull Stack Development with React & Node JS (Live)\nFull Stack Development\nData Science Program\nAll Courses\nPython Tutorial\nInterview Questions\nPython Quiz\nPython Glossary\nPython Projects\nPractice Python\nData Science With Python\nPython Web Dev\nDSA with Python\nPython OOPs\nSign In\n▲\nOpen In App\nNext Article:\nPython Introduction\nPython Tutorial - Learn Python Programming Language\nLast Updated :\n05 Jul, 2025\nSummarize\nComments\nImprove\nSuggest changes\nShare\nLike Article\nLike\nReport\nPython is one of the most popular programming languages. It’s simple to use, packed with features and supported by a wide range of libraries and frameworks. Its clean syntax makes it beginner-friendly.\nIt's\nA high-level language, used in web development, data science, automation, AI and more.\nKnown for its readability, which means code is easier to write, understand and maintain.\nBacked by library support, so we don’t have to build everything from scratch, there’s probably a library that already does what we need.\nWhy to Learn Python?\nRequires fewer lines of code compared to other programming languages.\nProvides Libraries / Frameworks like Django, Flask, Pandas, Tensorflow, Scikit-learn and many more for Web Development, AI/ML, Data Science and Data Analysis\nCross-platform, works on Windows, Mac and Linux without major changes.\nUsed by top tech companies like Google, Netflix and NASA.\nMany Python coding job opportunities in Software Development, Data Science and AI/ML.\nFirst Python Program\nHere is a simple Python code, printing a string. We recommend you to edit the code and try to print your own name.\nPython\nprint\n(\n\"Hello World\"\n)\nOutput\nHello World\n1. Python Basics\nIn this section, we’ll cover the basics of Python programming, including installing Python, writing first program, understanding comments and working with variables, keywords and operators. These are essential building blocks to get started with Python coding.\nBefore starting to learn python we need to\ninstall python\non our system.\nIntroduction\nInput and Output\nVariables\nOperators\nQuiz:\nBasics\n,\nI/O\nKeywords\nData Types\nQuiz:\nData Types\n,\nNumbers\n,\nBoolean\nConditional Statements\nPython Loops\nQuiz:\nControl Flow\n,\nLoops\n2. Python Functions\nPython Functions are the backbone of organized and efficient code in Python. Here, in this section of Python 3 tutorial we'll explore their syntax, parameter handling, return values and variable scope. From basic concepts to advanced techniques like closures and decorators. Along the way, we'll also introduce versatile functions like range(), map, filter and lambda functions.\nPython Functions\nPass Statement in Function\nGlobal and Local Variables\nRecursion in Python\n*args and **kwargs in Function\n‘Self’ as Default Argument\nFirst Class Function\nLambda Function\nMap\n,\nReduce\nand\nFilter Function\nInner Function\nDecorators\nQuiz:\nFunctions\n3. Python Data Structures\nPython offers versatile collections of data types, including lists, string, tuples, sets, dictionaries and arrays. In this section, we will learn about each data types in detail.\nStrings\nList\nQuiz:\nList\n,\nString\nTuples\nDictionary\nQuiz:\nTuples\n,\nDictionary\nSets\nArrays\nList Comprehension\nQuiz:\nSets\n,\nArrays\n,\nList Comprehension\nPython's collections module offers essential data structures, including the following:\nCounters\nHeapq\nDeque\nOrderedDict\nDefaultdict\nQuiz:\nCounters\n,\nHeapq\n,\nDeque\n,\nOrderedDict\nTo learn data structure and algorithm with python in detail, you can refer to our\nDSA with Python\nTutorial.\n4. Python OOPs Concepts\nIn this section of Python OOPs, we'll explore the core principles of object-oriented programming (OOP) in Python. From encapsulation to inheritance, polymorphism, abstract classes and iterators, we'll cover the essential concepts that helps you to build modular, reusable and scalable code.\nPython OOPs\nClasses and Objects\nPolymorphism\nInheritance\nAbstract\nEncapsulation\nIterators\nQuiz:\nOOPs\n5. Python Exception Handling\nIn this section of Python Tutorial, we'll explore Python Exception Handling that how Python deals with unexpected errors, enabling us to write fault-tolerant code. We'll cover file handling, including reading from and writing to files.\nPython Exception Handling\nBuilt-in Exception\nUser defined Exception\nQuiz:\nException Handling\n6. File Handling\nIn this section, we will cover file handling, including reading from and writing to files.\nFile Handling\nRead Files\nWrite/Create Files\nOS Module\npathlib Module\nDirectory Management\nQuiz:\nFile Handling\n7. Python Database Handling\nIn this section we will learn how to access and work with MySQL and MongoDB databases\nPython MongoDB Tutorial\nPython MySQL Tutorial\n8. Python Packages or Libraries\nPython is a huge collection of Python Packages standard libraries that make development easier. These libraries help with a wide range of tasks and can save you a lot of time by providing ready-to-use tools.\nSome commonly used types of libraries in Python include:\nPython Packages\nBuilt-in Modules in Python\nPython DSA Libraries\nPython GUI Libraries\n9. Data Science with Python\n1. Foundational Libraries\n: These are the libraries that form the base for all data science work. Start here to build a strong foundation.\nNumPy\nPandas\nMatplotlib\n2. Advanced Visualization and Statistical Tools:\nOnce you’re comfortable with basic data handling and visualization, move to creating cleaner visuals and performing statistical analysis.\nSeaborn\nStatsmodel\n3. Machine Learning Libraries:\nAfter data manipulation and visualization, learn machine learning, starting with simpler models and moving to advanced ones.\nScikit-learn\nXGBoost\n/\nLightGBM\n4.\nDeep Learning Frameworks:\nIf you’re interested in AI and deep learning, these libraries will allow you to build and train neural networks.\nTensorFlow\nand\nKeras\nPyTorch\nTo learn more, you can refer to\nPython for Data Science\n.\n10. Web Development with Python\n1. Core Web Frameworks (Backend Development with Python):\nThese are the tools for building Python-based web applications.\nFlask\nDjango\n2. Database Integration:\nLearn how to connect Python web frameworks to databases for storing and retrieving data.\nSQLite\nSQLAlchemy\nDjango ORM\n3. Front-End and Backend Integration:\nLearn how to connect Python backends with front-end technologies to create dynamic, full-stack web applications.\nJinja2 (Flask)\nDjango Templates\n4. API Development:\nLearn to build APIs (Application Programming Interfaces) for connecting your backend with front-end apps or other services.\nFlask-RESTful\nDjango REST Framework (DRF)\nTo learn more, you can refer to\nPython for Web Development\n.\nPython Quizzes\nPython quiz page covers topics including variables, data types and how to manage output effectively. You'll explore operators and control flow to structure our code, along with loops (for and while) for repetitive tasks. Additionally, you'll gain knowledge with Python data structures such as lists, tuples, dictionaries and sets.\nQuizzes\nPython Practice\nThe Python Coding Practice Problems page offers exercises for all skill levels, covering basics, loops, functions and OOP. You'll work with lists, strings, dictionaries, sets and advanced structures like heaps and deques. These problems help build a strong foundation and boost confidence in solving real-world coding challenges.\nPython Coding Problems\nFeatures of Python\nPython stands out because of its simplicity and versatility, making it a top choice for both beginners and professionals. Here are some key features or characteristics:\nEasy to Read and Write:\nPython’s syntax is clean and simple, making the code easy to understand and write. It is suitable for beginners.\nInterpreted Language:\nPython executes code line by line, which helps in easy debugging and testing during development.\nObject-Oriented and Functional:\nPython supports both object-oriented and functional programming, giving developers flexibility in how they structure their code.\nDynamically Typed:\nYou don’t need to specify data types when declaring variables; Python figures it out automatically.\nExtensive Libraries:\nPython has a rich collection of libraries for tasks like web development, data analysis, machine learning and more.\nCross-Platform:\nPython can run on different operating systems like Windows, macOS and Linux without modification.\nCommunity Support:\nPython has a large, active community that continuously contributes resources, libraries and tools, making it easier to find help or solutions.\nThis Python tutorial is updated based on latest Python 3.13.1 version.\nApplications of Python\nWeb Development\n:\nFrameworks like Django and Flask can be used to create dynamic websites and web applications quickly and efficiently.\nData Science\n&\nAnalysis\n:\nPython is most preferred language for data analysis, visualization and handling large datasets. Because of extensive libraries like Pandas, NumPy and Matplotlib.\nMachine Learning\n&\nAI\n:\nPython is popular in AI and machine learning because of its powerful libraries like TensorFlow, Keras and Scikit-learn.\nScripting & Automation\n:\nPython’s simplicity makes it ideal for writing scripts that automate tasks in different systems, from server management to file handling. Python is commonly used to automate repetitive tasks, making processes faster and more efficient.\nWeb Scraping\n:\nLibraries like Beautiful Soup and Scrapy.\nDesktop App Development\n:\nPython can be used to build desktop applications using frameworks like Tkinter and PyQt. Python is also used for game development, with libraries like Pygame to create simple games.\nPython vs. Other Programming Languages\nBelow is the comparison of Python with C, C++ and\nJava\n:\nFeature\nPython\nC/C++\nJavaScript\nJava\nType\nInterpreted\nCompiled\nInterpreted\nCompiled and Interpreted\nParadigm\nMulti-paradigm (object-oriented, procedural, functional)\nProcedural (C), Multi-paradigm (C++: object-oriented, generic)\nMulti-paradigm (event-driven, functional, object-oriented)\nObject-oriented, structured\nMemory Management\nAutomatic\nManual\nAutomatic\nAutomatic\nSyntax\nSimple\nComplex\nSimple\nComplex\nUse Cases\nWeb development, data analysis, machine learning\nSystem programming, embedded systems, game/high-performance development\nLarge-scale applications, enterprise software\nLarge-scale applications, enterprise software\nNotable Frameworks/Libraries\nDjango, Flask\nStandard Library, Boost\nSpring, Hibernate\nSpring, Hibernate\nCommunity Support\nStrong\nStrong\nStrong\nStrong\nJob Market\nAbundant\nAbundant\nAbundant\nAbundant\nList of Companies Using Python\nThese are some Popular companies that use Python in their workflow:\nCompany\nDescription\nGoogle\nUses Python for various applications, including their search engine and machine learning projects.\nInstagram\nThe backend of Instagram is built using Python, enabling it to handle millions of users efficiently.\nSpotify\nPython is used for data analysis and backend services, helping improve user recommendations.\nDropbox\nPython powers the desktop client of Dropbox, making it easy to sync files across devices.\nNetflix\nPython helps Netflix with data analysis and managing its content recommendation algorithms.\nReddit\nOne of the largest online communities, Reddit, uses Python for its core functionalities.\nUber\nUber uses Python for various features, including dynamic pricing and data analysis.\nPinterest\nPython plays a key role in the backend of Pinterest, helping scale and manage user content.\nCareer & Jobs in Python\nPython offer diverse opportunities across industries, here we have listed all the best career opportunity that anyone can pursue after learning Python.\nCareer\nAverage Salary (USD) Per Annum\nPython Developer\n$60,000 – $110,000\nData Scientist\n$70,000 – $130,000\nMachine Learning Engineer\n$75,000 – $140,000\nFull Stack Developer\n$65,000 – $120,000\nDevOps Engineer\n$80,000 – $140,000\nAutomation Engineer\n$55,000 – $100,000\nData Analyst\n$50,000 – $90,000\nSoftware Engineer\n$65,000 – $120,000\nBackend Developer\n$70,000 – $125,000\nAI Engineer\n$90,000 – $160,000\nPython Latest & Upcoming Features\nPython 3.13 is the most recent stable release of the programming language, featuring a blend of updates to its syntax, implementation and standard library. Key enhancements include the introduction of a revamped interactive interpreter, experimental capabilities for operating in a free-threaded mode (as outlined in PEP 703) and the addition of a Just-In-Time (JIT) compiler (detailed in PEP 744).\nThe upcoming version of Python is Python 3.14 and it is expected to include the following notable updates: UTF-8 Mode Default (PEP 686), Shorthand Syntax for Keyword Arguments, Enhanced f-strings, JSON-based Simple API (PEP 691).\n--> In this tutorial, we've provided the latest\nPython 3.13 version\ncompiler where you can edit and compile your written code directly with just one click of the RUN Button. So test yourself with Python first exercises.\nPython Introduction\nVisit Course\nPython Introduction\nHow Python Programs are Executed\nComments in Python\nVariables in Python\nList Introduction\nSet in Python\nComment\nMore info\nAdvertise with us\nNext Article\nPython Introduction\nK\nkartik\nFollow\nImprove\nArticle Tags :\nPython\nPython Programs\npython\nTutorials\nPractice Tags :\npython\npython\nSimilar Reads\nPython Tutorial - Learn Python Programming Language\nPython is one of the most popular programming languages. Itâ€™s simple to use, packed with features and supported by a wide range of libraries and frameworks. Its clean syntax makes it beginner-friendly. It'sA high-level language, used in web development, data science, automation, AI and more.Known fo\n10 min read\nPython Fundamentals\nPython Introduction\nPython was created by Guido van Rossum in 1991 and further developed by the Python Software Foundation. It was designed with focus on code readability and its syntax allows us to express concepts in fewer lines of code.Key Features of PythonPythonâ€™s simple and readable syntax makes it beginner-frien\n3 min read\nInput and Output in Python\nUnderstanding input and output operations is fundamental to Python programming. With the print() function, we can display output in various formats, while the input() function enables interaction with users by gathering input during program execution. Taking input in PythonPython's input() function\n7 min read\nPython Variables\nIn Python, variables are used to store data that can be referenced and manipulated during program execution. A variable is essentially a name that is assigned to a value. Unlike many other programming languages, Python variables do not require explicit declaration of type. The type of the variable i\n6 min read\nPython Operators\nIn Python programming, Operators in general are used to perform operations on values and variables. These are standard symbols used for logical and arithmetic operations. In this article, we will look into different types of Python operators. OPERATORS: These are the special symbols. Eg- + , * , /,\n6 min read\nPython Keywords\nKeywords in Python are reserved words that have special meanings and serve specific purposes in the language syntax. Python keywords cannot be used as the names of variables, functions, and classes or any other identifier. Getting List of all Python keywordsWe can also get all the keyword names usin\n2 min read\nPython Data Types\nPython Data types are the classification or categorization of data items. It represents the kind of value that tells what operations can be performed on a particular data. Since everything is an object in Python programming, Python data types are classes and variables are instances (objects) of thes\n9 min read\nConditional Statements in Python\nConditional statements in Python are used to execute certain blocks of code based on specific conditions. These statements help control the flow of a program, making it behave differently in different situations.If Conditional Statement in PythonIf statement is the simplest form of a conditional sta\n6 min read\nLoops in Python - For, While and Nested Loops\nLoops in Python are used to repeat actions efficiently. The main types are For loops (counting through items) and While loops (based on conditions). In this article, we will look at Python loops and understand their working with the help of examples. While Loop in PythonIn Python, a while loop is us\n9 min read\nPython Functions\nPython Functions is a block of statements that does a specific task. The idea is to put some commonly or repeatedly done task together and make a function so that instead of writing the same code again and again for different inputs, we can do the function calls to reuse code contained in it over an\n9 min read\nRecursion in Python\nRecursion involves a function calling itself directly or indirectly to solve a problem by breaking it down into simpler and more manageable parts. In Python, recursion is widely used for tasks that can be divided into identical subtasks.In Python, a recursive function is defined like any other funct\n6 min read\nPython Lambda Functions\nPython Lambda Functions are anonymous functions means that the function is without a name. As we already know the def keyword is used to define a normal function in Python. Similarly, the lambda keyword is used to define an anonymous function in Python. In the example, we defined a lambda function(u\n6 min read\nPython Data Structures\nPython String\nA string is a sequence of characters. Python treats anything inside quotes as a string. This includes letters, numbers, and symbols. Python has no character data type so single character is a string of length 1.Pythons = \"GfG\" print(s[1]) # access 2nd char s1 = s + s[0] # update print(s1) # printOut\n6 min read\nPython Lists\nIn Python, a list is a built-in dynamic sized array (automatically grows and shrinks). We can store all types of items (including another list) in a list. A list may contain mixed type of items, this is possible because a list mainly stores references at contiguous locations and actual items maybe s\n6 min read\nPython Tuples\nA tuple in Python is an immutable ordered collection of elements. Tuples are similar to lists, but unlike lists, they cannot be changed after their creation (i.e., they are immutable). Tuples can hold elements of different data types. The main characteristics of tuples are being ordered , heterogene\n6 min read\nDictionaries in Python\nPython dictionary is a data structure that stores the value in key: value pairs. Values in a dictionary can be of any data type and can be duplicated, whereas keys can't be repeated and must be immutable. Example: Here, The data is stored in key:value pairs in dictionaries, which makes it easier to\n5 min read\nPython Sets\nPython set is an unordered collection of multiple items having different datatypes. In Python, sets are mutable, unindexed and do not contain duplicates. The order of elements in a set is not preserved and can change.Creating a Set in PythonIn Python, the most basic and efficient method for creating\n10 min read\nPython Arrays\nLists in Python are the most flexible and commonly used data structure for sequential storage. They are similar to arrays in other languages but with several key differences:Dynamic Typing: Python lists can hold elements of different types in the same list. We can have an integer, a string and even\n9 min read\nList Comprehension in Python\nList comprehension is a way to create lists using a concise syntax. It allows us to generate a new list by applying an expression to each item in an existing iterable (such as a list or range). This helps us to write cleaner, more readable code compared to traditional looping techniques.For example,\n4 min read\nAdvanced Python\nPython OOPs Concepts\nObject Oriented Programming is a fundamental concept in Python, empowering developers to build modular, maintainable, and scalable applications. By understanding the core OOP principles (classes, objects, inheritance, encapsulation, polymorphism, and abstraction), programmers can leverage the full p\n11 min read\nPython Exception Handling\nPython Exception Handling handles errors that occur during the execution of a program. Exception handling allows to respond to the error, instead of crashing the running program. It enables you to catch and manage errors, making your code more robust and user-friendly. Let's look at an example:Handl\n7 min read\nFile Handling in Python\nFile handling refers to the process of performing operations on a file such as creating, opening, reading, writing and closing it, through a programming interface. It involves managing the data flow between the program and the file system on the storage device, ensuring that data is handled safely a\n7 min read\nPython Database Tutorial\nPython being a high-level language provides support for various databases. We can connect and run queries for a particular database using Python and without writing raw queries in the terminal or shell of that particular database, we just need to have that database installed in our system.A database\n4 min read\nPython MongoDB Tutorial\nMongoDB is a popular NoSQL database designed to store and manage data flexibly and at scale. Unlike traditional relational databases that use tables and rows, MongoDB stores data as JSON-like documents using a format called BSON (Binary JSON). This document-oriented model makes it easy to handle com\n2 min read\nPython MySQL\nPython MySQL Connector is a Python driver that helps to integrate Python and MySQL. This Python MySQL library allows the conversion between Python and MySQL data types. MySQL Connector API is implemented using pure Python and does not require any third-party library.Â  This Python MySQL tutorial will\n9 min read\nPython Packages\nPython packages are a way to organize and structure code by grouping related modules into directories. A package is essentially a folder that contains an __init__.py file and one or more Python files (modules). This organization helps manage and reuse code effectively, especially in larger projects.\n12 min read\nPython Modules\nPython Module is a file that contains built-in functions, classes,its and variables. There are many Python modules, each with its specific work.In this article, we will cover all about Python modules, such as How to create our own simple module, Import Python modules, From statements in Python, we c\n7 min read\nPython DSA Libraries\nData Structures and Algorithms (DSA) serve as the backbone for efficient problem-solving and software development. Python, known for its simplicity and versatility, offers a plethora of libraries and packages that facilitate the implementation of various DSA concepts. In this article, we'll delve in\n15 min read\nList of Python GUI Library and Packages\nGraphical User Interfaces (GUIs) play a pivotal role in enhancing user interaction and experience. Python, known for its simplicity and versatility, has evolved into a prominent choice for building GUI applications. With the advent of Python 3, developers have been equipped with lots of tools and li\n11 min read\nData Science with Python\nNumPy Tutorial - Python Library\nNumPy (short for Numerical Python ) is one of the most fundamental libraries in Python for scientific computing. It provides support for large, multi-dimensional arrays and matrices along with a collection of mathematical functions to operate on arrays.At its core it introduces the ndarray (n-dimens\n3 min read\nPandas Tutorial\nPandas is an open-source software library designed for data manipulation and analysis. It provides data structures like series and DataFrames to easily clean, transform and analyze large datasets and integrates with other Python libraries, such as NumPy and Matplotlib. It offers functions for data t\n6 min read\nMatplotlib Tutorial\nMatplotlib is an open-source visualization library for the Python programming language, widely used for creating static, animated and interactive plots. It provides an object-oriented API for embedding plots into applications using general-purpose GUI toolkits like Tkinter, Qt, GTK and wxPython. It\n5 min read\nPython Seaborn Tutorial\nSeaborn is a library mostly used for statistical plotting in Python. It is built on top of Matplotlib and provides beautiful default styles and color palettes to make statistical plots more attractive.In this tutorial, we will learn about Python Seaborn from basics to advance using a huge dataset of\n15+ min read\nStatsModel Library- Tutorial\nStatsmodels is a useful Python library for doing statistics and hypothesis testing. It provides tools for fitting various statistical models, performing tests and analyzing data. It is especially used for tasks in data science ,economics and other fields where understanding data is important. It is\n4 min read\nLearning Model Building in Scikit-learn\nBuilding machine learning models from scratch can be complex and time-consuming. Scikit-learn which is an open-source Python library which helps in making machine learning more accessible. It provides a straightforward, consistent interface for a variety of tasks like classification, regression, clu\n8 min read\nTensorFlow Tutorial\nTensorFlow is an open-source machine-learning framework developed by Google. It is written in Python, making it accessible and easy to understand. It is designed to build and train machine learning (ML) and deep learning models. It is highly scalable for both research and production.It supports CPUs\n2 min read\nPyTorch Tutorial\nPyTorch is an open-source deep learning framework designed to simplify the process of building neural networks and machine learning models. With its dynamic computation graph, PyTorch allows developers to modify the networkâ€™s behavior in real-time, making it an excellent choice for both beginners an\n7 min read\nWeb Development with Python\nFlask Tutorial\nFlask is a lightweight and powerful web framework for Python. Itâ€™s often called a \"micro-framework\" because it provides the essentials for web development without unnecessary complexity. Unlike Django, which comes with built-in features like authentication and an admin panel, Flask keeps things mini\n8 min read\nDjango Tutorial | Learn Django Framework\nDjango is a Python framework that simplifies web development by handling complex tasks for you. It follows the \"Don't Repeat Yourself\" (DRY) principle, promoting reusable components and making development faster. With built-in features like user authentication, database connections, and CRUD operati\n10 min read\nDjango ORM - Inserting, Updating & Deleting Data\nDjango's Object-Relational Mapping (ORM) is one of the key features that simplifies interaction with the database. It allows developers to define their database schema in Python classes and manage data without writing raw SQL queries. The Django ORM bridges the gap between Python objects and databas\n4 min read\nTemplating With Jinja2 in Flask\nFlask is a lightweight WSGI framework that is built on Python programming. WSGI simply means Web Server Gateway Interface. Flask is widely used as a backend to develop a fully-fledged Website. And to make a sure website, templating is very important. Flask is supported by inbuilt template support na\n6 min read\nDjango Templates\nTemplates are the third and most important part of Django's MVT Structure. A Django template is basically an HTML file that can also include CSS and JavaScript. The Django framework uses these templates to dynamically generate web pages that users interact with. Since Django primarily handles the ba\n7 min read\nPython | Build a REST API using Flask\nPrerequisite: Introduction to Rest API REST stands for REpresentational State Transfer and is an architectural style used in modern web development. It defines a set or rules/constraints for a web application to send and receive data. In this article, we will build a REST API in Python using the Fla\n3 min read\nHow to Create a basic API using Django Rest Framework ?\nDjango REST Framework (DRF) is a powerful extension of Django that helps you build APIs quickly and easily. It simplifies exposing your Django models as RESTfulAPIs, which can be consumed by frontend apps, mobile clients or other services.Before creating an API, there are three main steps to underst\n4 min read\nPython Practice\nPython Quiz\nThese Python quiz questions are designed to help you become more familiar with Python and test your knowledge across various topics. From Python basics to advanced concepts, these topic-specific quizzes offer a comprehensive way to practice and assess your understanding of Python concepts. These Pyt\n3 min read\nPython Coding Practice Problems\nThis collection of Python coding practice problems is designed to help you improve your overall programming skills in Python.The links below lead to different topic pages, each containing coding problems, and this page also includes links to quizzes. You need to log in first to write your code. Your\n1 min read\nPython Interview Questions and Answers\nPython is the most used language in top companies such as Intel, IBM, NASA, Pixar, Netflix, Facebook, JP Morgan Chase, Spotify and many more because of its simplicity and powerful libraries. To crack their Online Assessment and Interview Rounds as a Python developer, we need to master important Pyth\n15+ min read\nLike\nCorporate & Communications Address:\nA-143, 7th Floor, Sovereign Corporate Tower, Sector- 136, Noida, Uttar Pradesh (201305)\nRegistered Address:\nK 061, Tower K, Gulshan Vivante Apartment, Sector 137, Noida, Gautam Buddh Nagar, Uttar Pradesh, 201305\nAdvertise with us\nCompany\nAbout Us\nLegal\nPrivacy Policy\nIn Media\nContact Us\nAdvertise with us\nGFG Corporate Solution\nPlacement Training Program\nLanguages\nPython\nJava\nC++\nPHP\nGoLang\nSQL\nR Language\nAndroid Tutorial\nTutorials Archive\nDSA\nData Structures\nAlgorithms\nDSA for Beginners\nBasic DSA Problems\nDSA Roadmap\nTop 100 DSA Interview Problems\nDSA Roadmap by Sandeep Jain\nAll Cheat Sheets\nData Science & ML\nData Science With Python\nData Science For Beginner\nMachine Learning\nML Maths\nData Visualisation\nPandas\nNumPy\nNLP\nDeep Learning\nWeb Technologies\nHTML\nCSS\nJavaScript\nTypeScript\nReactJS\nNextJS\nBootstrap\nWeb Design\nPython Tutorial\nPython Programming Examples\nPython Projects\nPython Tkinter\nPython Web Scraping\nOpenCV Tutorial\nPython Interview Question\nDjango\nComputer Science\nOperating Systems\nComputer Network\nDatabase Management System\nSoftware Engineering\nDigital Logic Design\nEngineering Maths\nSoftware Development\nSoftware Testing\nDevOps\nGit\nLinux\nAWS\nDocker\nKubernetes\nAzure\nGCP\nDevOps Roadmap\nSystem Design\nHigh Level Design\nLow Level Design\nUML Diagrams\nInterview Guide\nDesign Patterns\nOOAD\nSystem Design Bootcamp\nInterview Questions\nInteview Preparation\nCompetitive Programming\nTop DS or Algo for CP\nCompany-Wise Recruitment Process\nCompany-Wise Preparation\nAptitude Preparation\nPuzzles\nSchool Subjects\nMathematics\nPhysics\nChemistry\nBiology\nSocial Science\nEnglish Grammar\nCommerce\nWorld GK\nGeeksforGeeks Videos\nDSA\nPython\nJava\nC++\nWeb Development\nData Science\nCS Subjects\n@GeeksforGeeks, Sanchhaya Education Private Limited\n,\nAll rights reserved\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\r\n        acknowledge that you have read and understood our\nCookie Policy\n&\nPrivacy Policy\nGot It !\nImprovement\nSuggest changes\nSuggest Changes\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\nCreate Improvement\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\nSuggest Changes\nmin 4 words, max Words Limit:1000\nThank You!\nYour suggestions are valuable to us.\nWhat kind of Experience do you want to share?\nInterview Experiences\nAdmission Experiences\nCareer Journeys\nWork Experiences\nCampus Experiences\nCompetitive Exam Experiences"}
{"url": "https://realpython.com", "content": "Python Tutorials – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\n/\nJoin\nSign‑In\nNEW\nWhat Is Python's __init__.py For?\nLearn to declare packages with Python's __init__.py, set package variables, simplify imports, and understand what happens if this module is missing.\nJul 09, 2025\nbasics\npython\nPodcasts\nView All »\n— FREE Email Series —\n🐍 Python Tricks 💌\nGet Python Tricks »\n🔒 No spam. Unsubscribe any time.\nBrowse Topics\nGuided Learning Paths\nBasics\nIntermediate\nAdvanced\napi\nbest-practices\ncareer\ncommunity\ndatabases\ndata-science\ndata-structures\ndata-viz\ndevops\ndjango\ndocker\neditors\nflask\nfront-end\ngamedev\ngui\nmachine-learning\nnumpy\nprojects\npython\ntesting\ntools\nweb-dev\nweb-scraping\nExplore Real Python\nLearning Paths\nGuided study plans for accelerated learning\nPython Tutorials\nIn-depth articles and step-by-step video courses\nQuizzes & Exercises\nEvaluate your Python knowledge with quick tests\nBrowse Topics\nFocus on a specific area or skill level\nCommunity Chat\nLearn with other Pythonistas\nOffice Hours\nLive Q&A calls with experts from Real Python\nPodcast\nHear what’s new in the world of Python\nBooks\nRound out your knowledge and learn offline\nReference\nConcise definitions for common Python terms\nCode Mentor\nBeta\nPersonalized code assistance & intelligent learning tools\nSearch »\nNew Releases\nView All »\nExploring Protocols in Python\nJul 08, 2025\nintermediate\npython\nFree-Threaded Python Unleashed and Other Python News for July 2025\nJul 07, 2025\ncommunity\nPython 3.14 Preview: Template Strings (T-Strings)\nJul 02, 2025\nintermediate\npython\nImplementing the Factory Method Pattern in Python\nJul 01, 2025\nintermediate\nbest-practices\nUse TorchAudio to Prepare Audio Data for Deep Learning\nJun 30, 2025\nintermediate\nmachine-learning\nYour Guide to the Python print() Function\nJun 25, 2025\nbasics\npython\nRemove ads\nStarting With DuckDB and Python\nJun 24, 2025\nintermediate\ndatabases\ndata-science\npython\nPython enumerate(): Simplify Loops That Need Counters\nJun 23, 2025\nbasics\nbest-practices\nPython Project: Build a Word Count Command-Line App\nJun 18, 2025\nintermediate\nprojects\nExploring Python's list Data Type With Examples\nJun 17, 2025\nintermediate\ndata-structures\npython\nWrite Pythonic and Clean Code With namedtuple\nJun 16, 2025\nintermediate\ndata-structures\npython\nDefining Your Own Python Function\nJun 11, 2025\nbasics\npython\nPython Continuous Integration and Deployment Using GitHub Actions\nJun 10, 2025\nadvanced\ndevops\nPython Hits the Big Screen and Other Python News for June 2025\nJun 09, 2025\ncommunity\nHow to Find an Absolute Value in Python\nJun 04, 2025\nbasics\npython\nExecute Your Python Scripts With a Shebang\nJun 03, 2025\nintermediate\nbest-practices\nHow Can You Structure Your Python Script?\nJun 02, 2025\nbasics\npython\nControl Flow Structures in Python\nMay 28, 2025\nintermediate\npython\nLoad More\nSearch »\nLearn Python\nStart Here\nLearning Resources\nCode Mentor\nPython Reference\nSupport Center\nCourses & Paths\nLearning Paths\nQuizzes & Exercises\nBrowse Topics\nWorkshops\nBooks\nCommunity\nPodcast\nNewsletter\nCommunity Chat\nOffice Hours\nLearner Stories\nMembership\nPlans & Pricing\nTeam Plans\nFor Business\nFor Schools\nReviews\nCompany\nAbout Us\nTeam\nSponsorships\nCareers\nPress Kit\nMerch\nPrivacy Policy\n⋅\nTerms of Use\n⋅\nSecurity\n⋅\nContact\nHappy Pythoning!\n© 2012–2025 DevCademy Media Inc. DBA Real Python. All rights reserved.\nREALPYTHON™ is a trademark of DevCademy Media Inc."}
{"url": "https://realpython.com/start-here", "content": "Become a Python Expert – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\n/\nJoin\nSign‑In\nBecome a\nPython Expert\n:\nMaster the\nEssential Skills\nfor\nSuccess in the Industry\nTurbocharge Your Python Learning with In-Depth Tutorials, Real-World Examples, and Expert Guidance\nCreate a Free Account →\nAnd Become a Python Expert\nGot a minute? Hear why learners choose Real Python:\nLearner Stories:\nWhat our members are saying →\nWhat Makes Real Python Special?\nReal Python\nis an online learning platform that teaches\nindividuals\nand\ncompanies\nthe skills they need to work with Python in the real world.\nFounded in 2012, we are a leading provider of online Python education and one of the largest language-specific online communities for software developers.\nWe publish high-quality learning resources, such as\ntutorials\n,\nbooks\n,\nemail newsletters\n,\npodcasts\n, and\ncourses\nto an audience of 1M+ developers, data scientists, and machine learning engineers each month.\nLearn Python the right way…\nOur learn-by-doing approach supports Pythonistas of any skill level. Along every step of the way, we’ll help you learn, practice, assess your progress, and apply your newfound skills to solve real-world problems.\nStart your learning journey. What would you like to learn?\nSearch\nGo\nBroad\nand\nDeep\non Any Topic in the Python Curriculum…\nTechnology moves\nfast\n—\nThink of Real Python as a “gym for Pythonistas” where we’ll help you grow your skills deeper and deeper over time and you can trust us that you’ll always find something new and interesting.\nInstead of wasting hours hunting for the right YouTube tutorial, boring themselves with Udemy courses of questionable quality, or begging for help on Reddit, Real Python members level up their skills quickly and effectively with curated resources that are always up to date.\nImmersive Learning\nis our philosophy:\nAt Real Python you can immerse yourself in a topic and explore it deeply with a variety of learning modalities, such as video courses, written tutorials, interactive quizzes, and podcast interviews.\nHere’s an example:\nLet’s say you want to learn about\nPython Decorators\n.\nThey’re an amazingly useful feature in Python, but can appear quite arcane at first:\nPython\ndef\ndo_twice\n(\nfunc\n):\ndef\nwrapper_do_twice\n(\n*\nargs\n,\n**\nkwargs\n):\nfunc\n(\n*\nargs\n,\n**\nkwargs\n)\nfunc\n(\n*\nargs\n,\n**\nkwargs\n)\nreturn\nwrapper_do_twice\n@do_twice\ndef\ngreet\n(\nname\n):\nprint\n(\nf\n\"Hello,\n{\nname\n}\n!\"\n)\n>>>\ngreet\n(\n\"World\"\n)\nHello\n,\nWorld\n!\nHello\n,\nWorld\n!\nNow, let’s turn you into a decorator expert…\nSimply type “\ndecorators\n” into the Real Python\nsearch box\nand you’ll find:\nA step-by-step video course\nthat gets you up to speed quickly with bite-sized lessons you can complete in just a few minutes at a time\nAn in-depth article\nto explore more decorator use cases in great detail and with copyable code snippets\nAn interactive quiz\nto test your knowledge of Python decorators\nA Q&A transcript from a Real Python Community Chat event\nwhere our staff of Python experts answered members’ questions about decorators\nMore tutorials and courses\nthat leverage decorators for writing clean and Pythonic code\nOur\nPython Tricks\nbook\nthat shows you how to use decorators and other Python-specific features for maximum productivity\nA podcast interview\nthat explores the topic further in a more conversational style (💡\nTip:\nPop in your headphones and round out your knowledge while you do laundry or take care of errands)\nAnd just like that, you’ve discovered your playbook for deeply understanding Python decorators so you can leverage them in your own programs and impress your coworkers (or interviewers!)\nHey there,\nI’m Dan, CEO here at Real Python.\nWelcome to Real Python! I’m excited you’ve decided to join us on this amazing journey to becoming an expert Pythonista.\nAt Real Python, we’re 100% focused on Python and all about making learning fun and engaging.\nOur mission is to help you develop a deep expertise in all aspects of working with this amazing language.\nOur passionate team works hard to provide you with the best learning experience. We offer up-to-date tutorials, courses, quizzes, and real-world projects to help you gain practical skills and effortless mastery in Python programming.\nSince you’re already on our “Start Here” page, you’re in the perfect place to begin. This page is an introduction to Real Python and a how-to for accessing learning resources tailored to your needs.\nI’m thrilled to have you in the Real Python community, and we’re always here to support you. Don’t hesitate to reach out if you have any questions or need help.\nWelcome aboard, and Happy Pythoning! ❤️🐍\n— Dan Bader\nWhere to Start?\nIf you’re\ncompletely new to programming\nand Python, then start your learning journey with the\nPython Basics\nlearning path below.\nThis path is designed to pick you up at the ground floor and carry you to basic proficiency with Python. After finishing the\nPython Basics\npath, you’ll be well equipped to tackle any of our other beginner learning paths:\nLearning Path\nPython Basics: Introduction to Python\n17 Resources ⋅\nSkills:\nPython 3 Fundamentals, Real-World Projects\nExplore All Learning Paths →\nLearning Python isn’t a one-size-fits-all task, so it’s important to spend some time thinking about why you’re here.\nWhat do you want to\ndo\nwith Python?\nThink about where you want to go, and then consider what skills you’ll need to get there. Learning is a continuous process. Stay open to exploring new areas and concepts, and don’t be afraid to revise your goals as your interests evolve.\n🔥 Tip:\nIf you’re unsure where to begin or jump into a learning path and get stuck, you can always ask for help in the\nReal Python Community Chat\nor at\nOffice Hours\n. Those are also great places to hear from other programmers who have been in your shoes and may have suggestions on what to do next.\nReady to kick things off? Check out our\nWelcome to Real Python\nonboarding course\nwhere you’ll get an overview of the features of the learning platform and tips on how you can make the most of Real Python, such as:\nHow to find the most valuable learning resources for your current skill level\nHow to meet and interact with other learners and the Real Python Team\nHow to learn effectively\n… and more!\nWatch the Onboarding Course →\nWhy Real Python?\nBiggest Wins & Results With Real Python\n(1:31)\nTo ensure a great learning experience and to continuously improve our service, we regularly ask our customers to share their thoughts in a feedback survey.\nHere’s what learners love about Real Python:\nConcise, clear, and in-depth explanations of various concepts, catering to different skill levels:\nOn-demand access to easy-to-understand resources that break down complex concepts into simple, digestible lessons. No more confusion or frustration—just clear, concise learning.\nComprehensive and understandable tutorials, including advanced concepts and best practices:\nStay up to date with the latest Python techniques and best practices. Our wide range of topics ensures you’ll always be at the cutting edge of Python development.\nHigh-quality content, including articles, video courses, and interactive quizzes, covering a wide range of topics:\nChoose the learning style that suits you best. With a mix of articles, video courses, and interactive quizzes, you’ll never experience learning fatigue.\nPractical, immediately applicable tutorials with real-world examples and applications:\nOur tutorials are designed with real-world applications in mind, ensuring that you can immediately apply what you’ve learned to your projects and professional development.\nRegularly updated and relevant content to stay current in the industry:\nStay ahead of the game with our regularly updated content. As the Python landscape evolves, so do our tutorials, ensuring you’re always in the know.\nEasy-to-understand, well-structured, and engaging resources with step-by-step examples:\nOur resources are designed to be engaging and easy to follow, with step-by-step examples that help you grasp even the most complex concepts.\nFair pricing and great value for the resources provided:\nInvest in your future without breaking the bank. Gain highly valuable skills with an affordable “all-access” pricing model.\nStrong community support, including networking opportunities and helpful guidance from instructors:\nJoin our vibrant community of Python enthusiasts and receive valuable support, networking opportunities, and guidance from our expert instructors.\nAccessible and useful for both beginners and experienced developers:\nWhether you’re just starting out or already an experienced developer, our platform caters to all skill levels, helping you reach your Python goals.\nPositive impact on personal and professional development, with users reporting increased proficiency and ability to apply their learning in real-world situations:\nBoost your career prospects and personal growth with our practical, real-world-focused tutorials.\nHow Real Python Works\nHere’s how our learning platform works. Master Python at your own pace with these features and comprehensive Python training resources:\nSkills-Focused Learning Paths\nGuided study plans for beginner, intermediate, and advanced developers through the entire Python curriculum.\nIn-Depth Written Tutorials & Books\nKeep your skills fresh and keep up with technology. With new content published weekly, you’re always up to date.\nStep-by-Step Video Courses\nFollow along and see how it’s done with bite-sized video lessons. Subtitles and searchable transcripts included.\nInteractive Quizzes\nAssess your skills and check your learning progress with quizzes and hands-on coding challenges.\nPodcast Interviews with Experts\nListen to in-depth interviews with open-source maintainers and industry experts to round out your knowledge.\nLive Workshops and Q&A Sessions\nJoin our weekly Real Python Office Hours and get your Python questions answered by experts from our team.\nSupportive Online Community\nShare your progress and find answers to your questions with peers and experts in our friendly learning community.\nDownloadable Sample Projects\nCommercial use of our example code and sample projects in your own programs is permitted.\nWhat You’ll Get:\nAn Effective Skills Roadmap to Clean & Pythonic Code\nReady to elevate your Python skills and become a highly sought-after developer?\nFrom beginners to experienced programmers, our expertly curated content will help you stay ahead of the curve in the ever-evolving world of Python development.\nChoose the option that best fits your needs:\nReal Python Membership\n(for Individuals)\nOur flagship product. An all-in-one Python learning platform that offers everything you need to master Python, regardless of your current skill level.\nA complete learning system, created by expert Pythonistas\nMaster the skills that will help you succeed in your career and personal projects\n100% Python-focused learning resources\nView Membership Options →\nReal Python for Teams\n(Business Accounts)\nYour one-stop-shop for online Python training. Give your team the knowledge, experience, and confidence they need to tackle any challenge.\nEmpower your team with membership access through a single billing account\nSimplify team license management and progress analytics\nEnsure team members stay up to date with the latest Python best practices and tools\nExplore Business Plans →\nPython Books\n(Digital & Paperback)\nLearn offline and take your Python skills to the next level with books written and published by the Real Python Team.\nPython Basics: A Practical Introduction to Python 3\nGo from beginner to intermediate in Python with this complete curriculum, showcasing the power of Python 3.\nPython Tricks: A Buffet of Awesome Python Features\nDiscover Python’s best practices with simple examples and start writing even more beautiful and Pythonic code.\nCPython Internals: Your Guide to the Python 3 Interpreter\nUnlock the inner workings of the Python language and compile the Python interpreter from source code with this technical deep dive.\nBrowse the Book Store →\nWhat Our Customers Say\n“Real Python is the most professional Python tutorial site.”\n—\nDavid Dansby\n,\nData Engineer at Atlassian\n“I came up to speed incredibly fast”\n—\nDouglas Ortego\n,\nSoftware Engineer\n“I am really enjoying Real Python. There is so much to learn and do, it’s just incredible! Plus, the tutorials really work as taught.”\n—\nPhilip Moose\n,\nPythonista\n“A fully integrated learning system […]\nand a community for camaraderie”\n—\nJamison Morse\n,\nManaging Principal\n“I’m always in there, no matter how much I think I know”\n—\nHugh Tipping\n,\nSenior Infrastructure Engineer\n“Very well designed, so that you\ncan choose how to approach things yourself”\n—\nLeona Rodenkirchen\n,\nTheoretical Physics M.Sc. Student\n“My biggest win so far is having the confidence in myself\nto tackle new projects that I would’ve set aside before”\n—\nChristopher Scogin\n,\nCloud Cyber Defence Analyst\n“It is a fantastic resource and\nit’s structured very well”\n—\nEdward Wright\n,\nSenior Systems Developer\n“There’s so much information there and\nit’s delivered really effectively”\n—\nBrian Patrick O’Sullivan\n,\nAirline Revenue Management\n“The explanations are thorough\nand lucid and they work\nfor anybody at any stage”\n—\nMandy Wong\n,\nAPI and Integration Specialist\nMore learner success stories →\nNot Sure Yet?\nNo problem! Here’s a great way to start—sign up for our free\nPython Tricks\nemail series (341,217 subscribers and counting) and get short, actionable coding tips delivered to your inbox:\n🐍 Python Tricks 💌\nGet a short & sweet\nPython Trick\ndelivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team.\nSend Me Python Tricks »\nWas this page helpful? Share your feedback\nLearn Python\nStart Here\nLearning Resources\nCode Mentor\nPython Reference\nSupport Center\nCourses & Paths\nLearning Paths\nQuizzes & Exercises\nBrowse Topics\nWorkshops\nBooks\nCommunity\nPodcast\nNewsletter\nCommunity Chat\nOffice Hours\nLearner Stories\nMembership\nPlans & Pricing\nTeam Plans\nFor Business\nFor Schools\nReviews\nCompany\nAbout Us\nTeam\nSponsorships\nCareers\nPress Kit\nMerch\nPrivacy Policy\n⋅\nTerms of Use\n⋅\nSecurity\n⋅\nContact\nHappy Pythoning!\n© 2012–2025 DevCademy Media Inc. DBA Real Python. All rights reserved.\nREALPYTHON™ is a trademark of DevCademy Media Inc."}
{"url": "https://realpython.com/search?kind=article&kind=course&order=newest", "content": "Tutorial Library – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\nJoin\nSign‑In\nAll Resources\nLearning Paths\nArticles\nCourses\nCourse Lessons\nQuizzes\nPodcasts\nReference\nTopics\nAll Skill Levels\nBasics\nIntermediate\nAdvanced\nAny Status\nBookmarked\nCompleted\nIn-Progress\nNot Started\nSend Feedback\n[[ resultsCount ]]\n[[' result' + (resultsCount == 0 || resultsCount > 1 ? \"s\" : \"\") ]]\nfor “[[ filters.query.length < 50 ? filters.query : filters.query.substring(0, 50) + \"…\" ]]”\nRelevance\nNewest\nRecently Viewed\nYour bookmarks list is empty\nAdd bookmarks by clicking on the\nbookmark ribbon\nicon when viewing course lessons or articles.\nContinue Learning\nRecently viewed resources will appear here in your\nContinue Learning\nlist, so you can quickly pick up where you left off.\nNot sure where to begin?\nRead our\nStart Here guide\nor pick a\nLearning Path\n.\nSorry, we couldn’t find any results matching this query.\nSearch Tips:\nCheck your spelling and try again\nUse a different set of search filters\nTry a similar but different search term, like \"for loop\" instead of \"for\"\nAsk\nCode Mentor\nfor recommendations\nTry asking a question in the\nReal Python Community\nor\nOffice Hours\nLooking for a more guided experience? Check out our\nstep-by-step learning paths\nor\nbrowse tutorials by topic\nLogin Required\nYou are not logged in. Filtering by bookmark status or learning progress requires a Real Python account. Creating an account is completely free and only takes a minute:\nSign-In\nor\nCreate an Account\n[[ result.annotation ]]\nBookmarked\nCompleted\n[[ result.title_prefix ]]\n[[ result.title ]]\n[[ result.pub_date ]]\n[[ cat ]]\n[[ result.description ]]\nFetching Search Results…\nThere was an error,\nplease click here to try again.\n© 2012–2025 Real Python ⋅\nPrivacy Policy"}
{"url": "https://realpython.com/learning-paths", "content": "Python Learning Paths – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\n/\nJoin\nSign‑In\n— FREE Email Series —\n🐍 Python Tricks 💌\nGet Python Tricks »\n🔒 No spam. Unsubscribe any time.\nTable of Contents\nAbsolute Basics\nPython Core Language: Basics\nPython Core Language: Intermediate\nPython Core Language: Advanced\nPython Beyond the Core Language\nHow to Select a Path That’s Right for You?\nPython Learning Paths\nTake your coding skills to the next level with Real Python’s accelerated study plans for beginner, intermediate, and advanced Python developers.\nAt\nReal Python\n, you can learn all things Python from the ground up. Everything from the absolute basics of Python, to web development and web scraping, to data visualization, and beyond.\nWhether you’re a beginner, intermediate, or advanced Pythonista, our custom-made\nlearning paths\nwill take your skills to the next level with accelerated, hands-on study plans.\nAll of the resources in our learning paths were created by professional Python developers with years of experience to ensure that you’re learning the skills and techniques that really matter.\nYou’ll find your way through an entire Python curriculum, so you’ll always know what to focus on next.\nBrowse Learning Paths\n: Ready to continue your Python journey? Pick your learning path below and jump right in, or\nsearch and filter learning paths by topic and skill level\n.\nSearch »\nAbsolute Basics\nIf you’re\ncompletely new to programming\nand Python, then start your learning journey with the\nPython Basics\nlearning path, which is designed to pick you up at the ground floor and carry you to basic proficiency with Python. After finishing this learning path, you’ll be well equipped to tackle any of our beginner learning paths.\nLearning Path\nPython Basics: Introduction to Python\n17 Resources ⋅\nSkills:\nPython 3 Fundamentals, Real-World Projects\nPython Core Language: Basics\nGet a jump start on your Python career with our learning resources designed\nfor beginners\n. Here you’ll find fundamental concepts for Python beginners, which will help you get started on your journey to learn Python. These tutorials focus on the absolute essentials that you need to know about Python.\nLearning Path\nRevisit Python Fundamentals\n12 Resources ⋅\nSkills:\nPython, Variables, Data Types, REPL, Operators, Expressions, Exceptions, Comments, Keywords, IDLE, String Conversion\nLearning Path\nI/O Operations and String Formatting\n9 Resources ⋅\nSkills:\nPython, Fundamentals, I/O, String Formatting\nLearning Path\nPython Control Flow and Loops\n11 Resources ⋅\nSkills:\nPython, Control Flow, for Loops, while Loops, break, continue, Context Managers\nLearning Path\nPython Data Structures\n23 Resources ⋅\nSkills:\nPython, Strings, Lists, Tuples, Dictionaries, Sets, List Comprehensions, range()\nLearning Path\nFunctions and Scopes\n7 Resources ⋅\nSkills:\nPython, Functions, Scope, Arguments, Parameters, Return, Globals\nPython Core Language: Intermediate\nOnce you’re past the basics, you can start digging into our\nintermediate-level tutorials\n, which will teach you new Python concepts. This category is for intermediate Python developers who already know the basics of Python development and want to expand their knowledge.\nLearning Path\nPerfect Your Python Development Setup\n12 Resources ⋅\nSkills:\nVS Code, PyCharm, Venv, Pyenv, Docker, Git, GitHub\nLearning Path\nModules and Packages\n9 Resources ⋅\nSkills:\nPackages, Modules, Import System, pip, PyPI\nLearning Path\nObject-Oriented Programming (OOP)\n14 Resources ⋅\nSkills:\nPython, OOP, Classes, Data Classes, Getters, Setters, Property, super(), SOLID, Inheritance, Composition, Factory Pattern\nLearning Path\nFiles and File Streams\n10 Resources ⋅\nSkills:\nPython, Pathlib, File I/O, Serialization, Encoding, Unicode, PDF, WAV\nLearning Path\nExceptions, Logging, and Debugging\n6 Resources ⋅\nSkills:\nPython, Exceptions, Logging, Debugging, pdb\nLearning Path\nClassic Data Structures and Algorithms\n18 Resources ⋅\nSkills:\nPython, Data Structures, Stacks, Queues, Linked Lists, Hash Tables, Enums, Search Algorithms\nLearning Path\nImportant Standard Library Modules\n15 Resources ⋅\nSkills:\nPython, Stdlib, math, datetime, JSON, CSV, Regex, collections, subprocess, argparse\nLearning Path\nFunctional Programming With Python\n13 Resources ⋅\nSkills:\nPython, Functional Programming, Lambda Functions, Built-in Functions, Map, Filter, Reduce, Scope, Decorators, Recursion, Code Efficiency, Readability\nLearning Path\nGenerators and Generator Expressions\n4 Resources ⋅\nSkills:\nPython, Iterators, Iterables, Itertools, Asynchronous Iterations, Generators, Yield\nLearning Path\nWrite More Pythonic Code\n15 Resources ⋅\nSkills:\nZen of Python, PEP 8 Standards, Application Layouts, Duck Typing, Type Checking, Type Hints, Code Documentation, MkDocs, Clean Code, Maintainable Code\nLearning Path\nTesting and Continuous Integration\n7 Resources ⋅\nSkills:\nUnit Testing, Doctest, Mock Object Library, Pytest, Continuous Integration, Docker, Code Quality, Test Automation, Software Testing, CI/CD\nPython Core Language: Advanced\nIn this section, you’ll find Python learning resources that teach you\nadvanced concepts\nso you can be on your way to becoming a master of the Python programming language. Once you’re past the intermediate level, you can start digging into these tutorials and courses, which will teach you advanced Python concepts and patterns.\nLearning Path\nConcurrency and Async Programming\n7 Resources ⋅\nSkills:\nPython, Concurrency, Async IO, Global Interpreter Lock, Thread Safety, Parallel Processing, Performance Optimization, Multithreading, Code Efficiency\nLearning Path\nDatabase Access With Python\n7 Resources ⋅\nSkills:\nSQL Libraries, SQLite, SQLAlchemy, Redis, MySQL, MongoDB, ChromaDB, Data Management, NoSQL Databases, Vector Databases\nLearning Path\nPython Metaprogramming\n4 Resources ⋅\nSkills:\nPython, Metaclasses, Descriptors, Dynamic Code Execution, exec(), eval(), Code Evaluation, Python Internals\nLearning Path\nNetwork Programming and Security\n4 Resources ⋅\nSkills:\nCRUD Operations, REST API Integration, HTTPS, Socket Programming, Network Security, Web Services, Networking, Application Security, Data Transmission\nLearning Path\nCreate Graphical User Interfaces (GUI)\n12 Resources ⋅\nSkills:\nTkinter, PyQt, wxPython, Kivy, GUI Layouts, Event Handling, Database Integration, Thread Management, Mobile App Development, GUI Design\nLearning Path\nUnderstand CPython\n9 Resources ⋅\nSkills:\nPython, Pointers, Memory Management, Profiling, CPython Source Code, C Extensions, Python Bindings, Memory Mapping, Performance Optimization\nLearning Path\nAce Your Python Coding Interview\n7 Resources ⋅\nSkills:\nCoding Interviews, Practice Problems, CSV Parsing, Data Engineering, Python Books, PyCon Talks, Problem-Solving, Interview Preparation, Coding Challenges\nPython Beyond the Core Language\nYou’re ready to explore what Python can do\noutside of its core functionality\n! Leverage Python’s powerful ecosystem for real-world applications like web development, data science, machine learning, and more. Dive into paths about popular frameworks and libraries such as Flask, Django, NumPy, and Pandas. Work through any of these paths side-by-side, or skip those that you’re not interested in.\nLearning Path\nBecome a Python Web Developer\n14 Resources ⋅\nSkills:\nWeb Development, Django, Flask, APIs\nLearning Path\nData Science With Python Core Skills\n15 Resources ⋅\nSkills:\nPandas, NumPy, Data Cleaning, Data Visualization\nLearning Path\nMath for Data Science\n5 Resources ⋅\nSkills:\nStatistics, Correlation, Linear Regression, Logistic Regression\nLearning Path\nData Collection & Storage\n9 Resources ⋅\nSkills:\nData Science, Databases\nLearning Path\nData Visualization With Python\n10 Resources ⋅\nSkills:\nNumPy, Matplotlib, Bokeh, Seaborn, pandas\nLearning Path\nFlask by Example\n12 Resources ⋅\nSkills:\nWeb Development, Flask Framework\nLearning Path\nPython Web Scraping\n9 Resources ⋅\nSkills:\nWeb Scraping, HTTP Requests, Data Parsing\nLearning Path\nDjango for Web Development\n16 Resources ⋅\nSkills:\nDjango, Web Development, Projects\nLearning Path\nGUI Programming With PyQt\n8 Resources ⋅\nSkills:\nGraphical User Interfaces (GUIs), Databases\nLearning Path\nDevOps With Python\n7 Resources ⋅\nSkills:\nPackaging & Deployment, AWS, Docker\nLearning Path\npandas for Data Science\n13 Resources ⋅\nSkills:\npandas, Data Science, Data Visualization\nLearning Path\nMachine Learning With Python\n26 Resources ⋅\nSkills:\nImage Processing, Text Classification, Speech Recognition\nHow to Select a Path That’s Right for You?\nLearning Python isn’t a one-size-fits-all task, so think about why you’re here.\nWhat do you want to\ndo\nwith Python?\nThink about where you want to go, and then consider what skills you’ll need to get there.\nIf you jump into a learning path and get stuck, you can always ask for help in the\nReal Python Community Chat\nor at\nOffice Hours\n. Those are also great places to hear from other programmers who have been in your shoes and may have suggestions on where to start.\nSearch »\nGot feedback on our learning paths?\nLearn Python\nStart Here\nLearning Resources\nCode Mentor\nPython Reference\nSupport Center\nCourses & Paths\nLearning Paths\nQuizzes & Exercises\nBrowse Topics\nWorkshops\nBooks\nCommunity\nPodcast\nNewsletter\nCommunity Chat\nOffice Hours\nLearner Stories\nMembership\nPlans & Pricing\nTeam Plans\nFor Business\nFor Schools\nReviews\nCompany\nAbout Us\nTeam\nSponsorships\nCareers\nPress Kit\nMerch\nPrivacy Policy\n⋅\nTerms of Use\n⋅\nSecurity\n⋅\nContact\nHappy Pythoning!\n© 2012–2025 DevCademy Media Inc. DBA Real Python. All rights reserved.\nREALPYTHON™ is a trademark of DevCademy Media Inc."}
{"url": "https://realpython.com/quizzes", "content": "Python Quizzes – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\n/\nJoin\nSign‑In\nPython Quizzes\nCheck your Python learning progress and take your skills to the next level with Real Python’s interactive quizzes.\nWe created these online Python quizzes as a fun way for you to check your learning progress and to test your skills.\nEach quiz takes you through a series of questions. Some of them are multiple choice, some will ask you to type in an answer, and some will require you to write actual Python code. As you make your way through each quiz, it keeps score of which questions you answered correctly.\nAt the end of each quiz you receive a grade based on your result. If you don’t score 100% on your first try—don’t fret! These quizzes are meant to challenge you and it’s expected that you go through them several times, improving your score with each run.\nBrowse Python Quizzes\n: Ready to test your Python skills? Pick a quiz below and jump right in, or\nsearch and filter quizzes by topic and skill level\n.\nSearch »\nInteractive Quiz\nA Guide to Modern Python String Formatting Tools\nYou can take this quiz to test your understanding of modern tools for string formatting in Python. These tools include f-strings and the .format() method.\nInteractive Quiz\nA Practical Introduction to Web Scraping in Python\nIn this quiz, you'll test your understanding of web scraping in Python. Web scraping is a powerful tool for data collection and analysis. By working through this quiz, you'll revisit how to parse website data using string methods, regular expressions, and HTML parsers, as well as how to interact with forms and other website components.\nInteractive Quiz\nAsynchronous Iterators and Iterables in Python\nTake this quiz to test your understanding of how to create and use Python async iterators and iterables in the context of asynchronous code.\nInteractive Quiz\nAsync IO in Python: A Complete Walkthrough\nIn this quiz, you'll test your understanding of async IO in Python. With this knowledge, you'll be able to understand the language-agnostic paradigm of asynchronous IO, use the async/await keywords to define coroutines, and use the asyncio package to run and manage coroutines.\nInteractive Quiz\nBasic Data Types in Python: A Quick Exploration\nTake this quiz to test your understanding of the basic data types that are built into Python, like numbers, strings, bytes, and Booleans.\nInteractive Quiz\nBasic Input and Output in Python\nIn this quiz, you'll test your understanding of Python's built-in functions for user interaction, namely input() and print(). These functions allow you to capture user input from the keyboard and display output to the console, respectively.\nInteractive Quiz\nBeautiful Soup: Build a Web Scraper With Python\nIn this quiz, you'll revisit the main steps of the web scraping process. You'll learn how to write a script that uses Python's Requests library to scrape data from a website. You'll also use Beautiful Soup to extract the specific pieces of information that you're interested in.\nInteractive Quiz\nBeautiful Soup: Build a Web Scraper With Python\nIn this quiz, you'll test your understanding of web scraping using Python. By working through this quiz, you'll revisit how to inspect the HTML structure of a target site, decipher data encoded in URLs, and use Requests and Beautiful Soup for scraping and parsing data.\nInteractive Quiz\nBuild a Blog Using Django, GraphQL, and Vue\nIn this quiz, you'll test your understanding of building a Django blog back end and a Vue front end, using GraphQL to communicate between them. This will help you decouple your back end and front end, handle data persistence in the API, and display the data in a single-page app (SPA).\nInteractive Quiz\nBuild a Guitar Synthesizer\nIn this quiz, you'll test your understanding of what it takes to build a guitar synthesizer in Python. By working through this quiz, you'll revisit a few key concepts from music theory and sound synthesis.\nInteractive Quiz\nBuild an LLM RAG Chatbot With LangChain\nIn this quiz, you'll test your understanding of building a retrieval-augmented generation (RAG) chatbot using LangChain and Neo4j. This knowledge will allow you to create custom chatbots that can retrieve and generate contextually relevant responses based on both structured and unstructured data.\nInteractive Quiz\nBuild Command-Line Interfaces With Python's argparse\nIn this quiz, you'll test your understanding of creating command-line interfaces (CLIs) in Python using the argparse module. This knowledge is essential for creating user-friendly command-line apps, which are common in development, data science, and systems administration.\nInteractive Quiz\nChoosing the Best Font for Programming\nIn this quiz, you'll test your understanding of how to choose the best font for your daily programming. You'll get questions about the technicalities and features to consider when choosing a programming font and refresh your knowledge about how to spot a high-quality coding font.\nInteractive Quiz\nContext Managers and Python's with Statement\nIn this quiz, you'll assess your understanding of the Python with statement and context managers. By mastering these concepts, you'll be able to write more expressive code and manage system resources more effectively, avoiding resource leaks and ensuring proper setup and teardown of external resources.\nInteractive Quiz\nControl Flow Structures in Python\nIn this quiz, you'll test your understanding of Python control flow structures, which include conditionals, loops, exception handling, and structural pattern matching. Strengthening these skills will help you write more dynamic, smart, and robust Python code.\nInteractive Quiz\nCreating Great README Files for Your Python Projects\nTake this quiz to test your understanding of how a great README file can make your Python project stand out and how to create your own README files.\nInteractive Quiz\nData Classes in Python\nIn this quiz, you'll test your understanding of Python data classes.\nData classes, a feature introduced in Python 3.7, are a type of class mainly used for storing data.\nThey come with basic functionality already implemented, such as instance initialization, printing, and comparison.\nInteractive Quiz\nDecorators\nIn this quiz, you'll revisit the foundational concepts of what Python decorators are and how to create and use them.\nInteractive Quiz\nDefining Main Functions in Python\nIn this quiz, you'll test your understanding of the Python main() function and the special __name__ variable. With this knowledge, you'll be able to understand the best practices for defining main() in Python.\nInteractive Quiz\nDefining Your Own Python Function\nIn this quiz, you'll test your understanding of defining and calling Python functions. You'll revisit the def keyword, parameters, arguments, and more.\nInteractive Quiz\nDefining Your Own Python Function\nIn this quiz, you'll test your understanding of how to define your own Python functions. You'll revisit both the basics and more complex syntax, such as args and kwargs, to sharpen your knowledge of function definitions in Python.\nInteractive Quiz\nDictionaries in Python\nIn this quiz, you'll test your understanding of Python's dict data type. By working through this quiz, you'll revisit how to create and manipulate dictionaries, how to use Python's operators and built-in functions with them, and how they're implemented for efficient data retrieval.\nInteractive Quiz\nDocumenting Python Code: A Complete Guide\nIn this quiz, you'll test your understanding of documenting Python code. With this knowledge, you'll be able to effectively document your Python scripts and projects, making them more understandable and maintainable.\nInteractive Quiz\nEffective Testing with Pytest\nIn this quiz, you'll test your understanding of pytest, a Python testing tool. With this knowledge, you'll be able to write more efficient and effective tests, ensuring your code behaves as expected.\nInteractive Quiz\nExpression vs Statement in Python: What's the Difference?\nIn this quiz, you'll test your understanding of Python expressions vs statements. Knowing the difference between these two is crucial for writing efficient and readable Python code.\nInteractive Quiz\nFormat Floats Within F-Strings\nIn this quiz, you'll test your understanding of how to format floats within f-strings in Python. This knowledge will let you control the precision and appearance of floating-point numbers when you incorporate them into formatted strings.\nInteractive Quiz\nFunctional Programming in Python: When and How to Use It\nIn this quiz, you'll test your understanding of functional programming in Python. You'll revisit concepts such as functions being first-class citizens in Python, the use of the lambda keyword, and the implementation of functional code using map(), filter(), and reduce().\nInteractive Quiz\nGenerate Images With DALL·E and the OpenAI API\nIn this quiz, you'll test your understanding of generating images with DALL·E by OpenAI using Python. You'll revisit concepts such as using the OpenAI Python library, making API calls for image generation, creating images from text prompts, and converting Base64 strings to PNG image files.\nInteractive Quiz\nGet Started With Django: Build a Portfolio App\nIn this quiz, you'll test your understanding of Django, a fully featured Python web framework. By working through this quiz, you'll revisit the steps to create a fully functioning web application and learn about some of Django's most important features.\nInteractive Quiz\nGetters and Setters: Manage Attributes in Python\nIn this quiz, you'll test your understanding of Python's getter and setter methods, as well as properties. You'll learn when to use these tools and how they can help maintain encapsulation in your classes.\nInteractive Quiz\nGetting Started With Async Features in Python\nIn this quiz, you'll test your understanding of asynchronous programming in Python. You'll revisit the concepts of synchronous and asynchronous programs, and why you might want to write an asynchronous program. You'll also test your knowledge on how to use Python async features.\nInteractive Quiz\nGetting Started With Python IDLE\nIn this quiz, you'll test your understanding of Python IDLE, the default integrated development environment (IDE) that comes bundled with every Python installation. You'll revisit how to interact with Python directly in IDLE, edit and execute Python files.\nInteractive Quiz\nGetting Started With Testing in Python\nIn this quiz, you'll test your understanding of Python testing. With this knowledge, you'll be able to create basic tests, execute them, and find bugs before your users do.\nInteractive Quiz\nGitHub Actions for Python\nIn this quiz, you'll test your understanding of GitHub Actions for Python. By working through this quiz, you'll revisit how to use GitHub Actions and workflows to automate linting, testing, and deployment of a Python project.\nInteractive Quiz\nHow Can You Structure Your Python Script?\nIn this quiz, you'll test your understanding of organizing and structuring Python scripts. You'll revisit key concepts about best practices for writing clear, maintainable, and executable Python code.\nInteractive Quiz\nHow Do You Choose Python Function Names?\nIn this quiz, you'll test your understanding of how to choose Python function names.\nBy working through this quiz, you'll revisit the rules and conventions for naming Python functions\nand why they're important for writing Pythonic code.\nInteractive Quiz\nHow to Check if a Python String Contains a Substring\nIn this quiz, you'll check your understanding of the best way to check whether a Python string contains a substring. You'll also revisit idiomatic ways to inspect the substring further, match substrings with conditions using regular expressions, and search for substrings in pandas.\nInteractive Quiz\nHow to Create Pivot Tables With pandas\nThis quiz is designed to push your knowledge of pivot tables a little bit further. You won't find all the answers by reading the tutorial, so you'll need to do some investigating on your own. By finding all the answers, you're sure to learn some other interesting things along the way.\nInteractive Quiz\nHow to Deal With Missing Data in Polars\nThis quiz will test your knowledge of working with null data in Polars. You won't find all the answers in the tutorial, so you'll need to do some extra investigating. By finding all the answers, you're sure to learn some interesting things along the way.\nInteractive Quiz\nHow to Exit Loops Early With the Python Break Keyword\nIn this quiz, you'll test your understanding of the Python break statement. This keyword allows you to exit a loop prematurely, transferring control to the code that follows the loop.\nInteractive Quiz\nHow to Find an Absolute Value in Python\nIn this quiz, you'll test your knowledge of calculating absolute values in Python, mastering both built-in functions and common use cases to improve your coding accuracy.\nInteractive Quiz\nHow to Flatten a List of Lists in Python\nIn this quiz, you'll test your understanding of how to flatten a list in Python. Flattening a list involves converting a multidimensional list, such as a matrix, into a one-dimensional list. This is a common operation when working with data stored as nested lists.\nInteractive Quiz\nHow to Group Data Using Polars .group_by()\nPut your Polars .group_by() and aggregation skills to the test. This quiz goes beyond the tutorial, so you'll need to dig deeper to find all the answers.\nInteractive Quiz\nHow to Join Strings in Python\nTest your understanding of Python's .join() string method for combining strings, handling edge cases, and optimizing performance.\nInteractive Quiz\nHow to Manage Python Projects With pyproject.toml\nIn this quiz, you'll test your understanding of Python's pyproject.toml file, which simplifies Python project configuration by unifying package setup, managing dependencies, and streamlining builds.\nInteractive Quiz\nHow to Remove Items From Lists in Python\nIn this quiz, you'll test your understanding of removing items from lists in Python. This is a fundamental skill in Python programming, and mastering it will enable you to manipulate lists effectively.\nInteractive Quiz\nHow to Reset a pandas DataFrame Index\nThis quiz will challenge your knowledge of resetting indexes in pandas DataFrames. You won't find all the answers in the tutorial, so you'll need to do some extra investigating. By finding all the answers, you're sure to learn some interesting things along the way.\nInteractive Quiz\nHow to Run Your Python Scripts\nOne of the most important skills you need to build as a Python developer is to be able to run Python scripts and code. Test your understanding on how good you are with running your code.\nInteractive Quiz\nHow to Split a String in Python\nIn this quiz, you'll test your understanding of Python's .split() method. This method is useful for text-processing and data parsing tasks, allowing you to divide a string into a list of substrings based on a specified delimiter.\nInteractive Quiz\nHow to Strip Characters From a Python String\nIn this quiz, you'll test your understanding of Python's .strip(), .lstrip(), and .rstrip() methods, as well as .removeprefix() and .removesuffix(). These methods are useful for tasks like cleaning user input, standardizing filenames, and preparing data for storage.\nInteractive Quiz\nHow to Use Conditional Expressions With NumPy where()\nThis quiz aims to test your understanding of the np.where() function. You won't find all the answers in the tutorial, so you'll need to do additional research. It's recommended that you make sure you can do all the exercises in the tutorial before tackling this quiz. Enjoy!\nInteractive Quiz\nHow to Use Generators and yield in Python\nIn this quiz, you'll test your understanding of Python generators and the yield statement. With this knowledge, you'll be able to work with large datasets in a more Pythonic fashion, create generator functions and expressions, and build data pipelines.\nInteractive Quiz\nHow to Use sorted() and .sort() in Python\nIn this quiz, you'll test your understanding of sorting in Python using sorted() and .sort(). You'll revisit how to sort various types of data in different data structures, customize the order, and work with two different ways of sorting in Python.\nInteractive Quiz\nHow to Work With Polars LazyFrames\nThis quiz will challenge your knowledge of working with Polars LazyFrames. You won't find all the answers in the tutorial, so you'll need to do some extra investigating. By finding all the answers, you're sure to learn some interesting things along the way.\nInteractive Quiz\nHow to Write Beautiful Python Code With PEP 8\nIn this quiz, you'll test your understanding of PEP 8, the Python Enhancement Proposal that provides guidelines and best practices on how to write Python code. By working through this quiz, you'll revisit the key guidelines laid out in PEP 8 and how to set up your development environment to write PEP 8 compliant Python code.\nInteractive Quiz\nHTTP Requests With the \"requests\" Library\nTest your understanding of the Python \"requests\" library for making HTTP requests and interacting with web services.\nInteractive Quiz\nHugging Face Transformers\nIn this quiz, you'll test your understanding of the Hugging Face Transformers library. This library is a popular choice for working with transformer models in natural language processing tasks, computer vision, and other machine learning applications.\nInteractive Quiz\nImplementing an Interface in Python\nIn this quiz, you'll test your understanding of Python interfaces and their role in software engineering. You'll learn how interfaces can help manage complexity in a growing application and how to implement them in Python.\nInteractive Quiz\nInheritance and Composition: A Python OOP Guide\nIn this quiz, you'll test your understanding of inheritance and composition in Python. These are two major concepts in object-oriented programming that help model the relationship between two classes. By working through this quiz, you'll revisit how to use inheritance and composition in Python, model class hierarchies, and use multiple inheritance.\nInteractive Quiz\nInstall and Execute Python Applications Using pipx\nIn this quiz, you'll test your understanding of how Python apps are run from isolated virtual environments using the pipx tool. With this knowledge, you'll be able to safely run Python apps that are installed globally in your operating system.\nInteractive Quiz\nInteracting With Python\nIn this quiz, you'll test your understanding of the different ways of interacting with Python. By working through this quiz, you'll revisit key concepts related to Python interaction in interactive mode using the REPL, through Python script files, and within IDEs and code editors.\nInteractive Quiz\nIntroducing DuckDB\nThis quiz will challenge your knowledge of working with DuckDB. You won't find all the answers in the tutorial, so you'll need to do some extra investigation. By finding all the answers, you're sure to learn some interesting things along the way.\nInteractive Quiz\nIterators and Iterables in Python: Run Efficient Iterations\nIn this quiz, you'll test your understanding of Python's iterators and iterables. By working through this quiz, you'll revisit how to create and work with iterators and iterables, the differences between them, and review how to use generator functions.\nInteractive Quiz\nLangGraph: Build Stateful AI Agents in Python\nTake this quiz to test your understanding of LangGraph, a Python library designed for stateful, cyclic, and multi-actor Large Language Model (LLM) applications. By working through this quiz, you'll revisit how to build LLM workflows and agents in LangGraph.\nInteractive Quiz\nLinear Regression in Python\nIn this quiz, you'll test your knowledge of linear regression in Python. Linear regression is one of the fundamental statistical and machine learning techniques, and Python is a popular choice for machine learning.\nInteractive Quiz\nLists vs Tuples in Python\nChallenge yourself with this quiz to evaluate and deepen your understanding of Python lists and tuples. You'll explore key concepts, such as how to create, access, and manipulate these data types, while also learning best practices for using them efficiently in your code.\nInteractive Quiz\nLogging in Python\nIn this quiz, you'll test your understanding of Python's logging module. With this knowledge, you'll be able to add logging to your applications, which can help you debug errors and analyze performance.\nInteractive Quiz\nManaging Multiple Python Versions With pyenv\nIn this quiz, you'll test your understanding of how to use pyenv to manage multiple versions of Python.\nInteractive Quiz\nManaging Python Projects With uv: An All-in-One Solution\nIn this quiz, you'll test your understanding of the uv tool, a high-speed package and project manager for Python.\nInteractive Quiz\nmarimo: A Reactive, Reproducible Notebook\nThis quiz is a great way to reinforce and build on what you've learned about marimo notebooks. You'll find most of the answers in the tutorial, but you'll need to do some additional research to find some of the answers.\nInteractive Quiz\nModel-View-Controller (MVC) in Python Web Apps: Explained With Lego\nIn this quiz, you'll test your understanding of the Model-View-Controller (MVC) design pattern, a fundamental concept in many Python web frameworks. By working through this quiz, you'll revisit the concepts of Models, Views, and Controllers, and how they relate to concrete web development examples.\nInteractive Quiz\nNamespaces and Scope in Python\nIn this quiz, you'll test your understanding of Python namespaces and variable scope. These concepts are crucial for organizing the symbolic names assigned to objects in a Python program and ensuring they don't interfere with one another.\nInteractive Quiz\nNamespaces in Python\nIn this quiz, you'll test your understanding of Python namespaces. These concepts are crucial for organizing the symbolic names assigned to objects in a Python program and ensuring they don't interfere with one another.\nInteractive Quiz\nNested Loops in Python\nNested loops allow you to perform repeated actions over multiple sequences, but is there more? Test your understanding of nested loops in Python!\nInteractive Quiz\nNumPy Practical Examples: Useful Techniques\nThis quiz will test your understanding of working with NumPy arrays. You won't find all the answers in the tutorial, so you'll need to do some extra investigating. By finding all the answers, you're sure to learn some interesting things along the way.\nInteractive Quiz\nObject-Oriented Programming (OOP) in Python\nObject-oriented programming (OOP) is a method of structuring a program by bundling related properties and behaviors into individual objects.\nInteractive Quiz\nPractical Prompt Engineering\nIn this quiz, you'll test your understanding of prompt engineering techniques with large language models (LLMs) like GPT-3.5 and GPT-4. You'll revisit how to work with OpenAI's API, apply prompt engineering techniques to practical examples, and use various strategies to improve your results.\nInteractive Quiz\nPrimer on Jinja Templating\nIn this quiz, you'll test your understanding of Jinja templating. Jinja is a powerful tool for building rich templates in Python web applications, and it can also be used to create text files with programmatic content.\nInteractive Quiz\nPydantic: Simplifying Data Validation in Python\nIn this quiz, you'll test your understanding of Pydantic, a powerful data validation library for Python. You'll revisit concepts such as working with data schemas, writing custom validators, validating function arguments, and managing settings with pydantic-settings.\nInteractive Quiz\nPython 3.13: Cool New Features for You to Try\nIn this quiz, you'll test your understanding of the new features introduced in Python 3.13. By working through this quiz, you'll review the key updates and improvements in this version of Python.\nInteractive Quiz\nPython 3.13: Free Threading and a JIT Compiler\nIn this quiz, you'll test your understanding of the new features in Python 3.13. You'll revisit how to compile a custom Python build, disable the Global Interpreter Lock (GIL), enable the Just-In-Time (JIT) compiler, and more.\nInteractive Quiz\nPython 3.14 Preview: Template Strings (T-Strings)\nEvaluate your grasp of Python's t-strings, which provide a structured and secure way to handle string templates.\nInteractive Quiz\nPython and REST APIs: Interacting With Web Services\nIn this quiz, you'll test your understanding of REST APIs and how to interact with them using Python. With this knowledge, you'll be able to retrieve, parse, update, and manipulate data provided by any RESTful API that you're interested in.\nInteractive Quiz\nPython args and kwargs: Demystified\nIn this quiz, you'll test your understanding of how to use *args and **kwargs in Python. With this knowledge, you'll be able to add more flexibility to your functions.\nInteractive Quiz\nPython Basics: Building Systems With Classes\nYou can use classes to build complex systems in Python. By composing classes, inheriting from other classes, and overriding class behavior, you'll harness the power of object-oriented programming (OOP).\nInteractive Quiz\nPython Basics: Code Your First Python Program\nWith Python installed, you're ready ready to start coding! It's time to write your first Python program.\nInteractive Quiz\nPython Basics: Conditional Logic and Control Flow\nWith conditional logic, you can write programs that perform different actions based on different conditions. Paired with functions and loops, conditional logic allows you to write complex programs that can handle many different situations.\nInteractive Quiz\nPython Basics: Dictionaries\nPython dictionaries, like lists and tuples, store a collection of objects. However, instead of storing objects in a sequence, dictionaries hold information in pairs of data called key-value pairs.\nInteractive Quiz\nPython Basics: File System Operations\nThe pathlib module allows you to carry out file path operations with Python. These operations include creating, iterating over, searching for, moving, and deleting files and folders.\nInteractive Quiz\nPython Basics: Finding and Fixing Code Bugs\nLogic errors occur when an otherwise valid program doesn't do what was intended. They cause unexpected behaviors called bugs. Removing bugs is called debugging, and a debugger is a tool that helps you hunt down bugs and understand why they're happening.\nInteractive Quiz\nPython Basics: Functions and Loops\nFunctions break code into smaller chunks and are great for defining actions that a program will execute several times throughout your code. Instead of writing the same code each time the program needs to perform the same task, just call the function!\nInteractive Quiz\nPython Basics: Installing Packages With pip Quiz\nEven though Python is famous for coming with batteries included, you'll still find yourself in need of a third-party library from time to time. You can install such packages with pip.\nInteractive Quiz\nPython Basics: Lists and Tuples\nLists and tuples are important sequence data structures in Python. Lists are mutable, while tuples are immutable. Combining your knowledge of control flow and loops with these sequences allows you to build complex logic.\nInteractive Quiz\nPython Basics: Modules and Packages\nYou can build an application by putting related code into separate files called modules. Then, you can use the import statement to use modules in another file.\nInteractive Quiz\nPython Basics: Numbers and Math\nYou don't need to be a math whiz to program well, but numbers are an integral part of any programming language. Python is no exception.\nInteractive Quiz\nPython Basics: Object-Oriented Programming\nOOP, or object-oriented programming, is a method of structuring a program by bundling related properties and behaviors into individual objects. In this quiz, you'll test your understanding of OOP.\nInteractive Quiz\nPython Basics: Reading and Writing Files Quiz\nBy reading and writing files, you can move data back and forth between your Python programs and external software. The CSV file format is particularly useful, as it's one of the most widely supported file formats for transferring tabular data.\nInteractive Quiz\nPython Basics: Scopes\nTo fully understand functions and loops in Python, you need to be familiar with the issue of scope, which determines where a name is visible within your program.\nInteractive Quiz\nPython Basics: Strings and String Methods\nStrings are a fundamental data type in Python. In simplified terms, strings are collections of text, and they show up in many contexts. For example, strings can come from user input, data read from a file, or messages sent by equipment talking over a network.\nInteractive Quiz\nPython Bytes\nIn this quiz, you'll test your understanding of Python bytes objects. By working through this quiz, you'll revisit the key concepts related to this low-level data type.\nInteractive Quiz\nPython Class Constructors: Control Your Object Instantiation\nIn this quiz, you'll test your understanding of class constructors in Python. By working through this quiz, you'll revisit the internal instantiation process, object initialization, and fine-tuning object creation.\nInteractive Quiz\nPython Classes - The Power of Object-Oriented Programming\nIn this quiz, you'll test your understanding of Python classes. With this knowledge, you'll be able to define reusable pieces of code that encapsulate data and behavior in a single entity, model real-world objects, and solve complex problems.\nInteractive Quiz\nPython Closures: Common Use Cases and Examples\nIn this quiz, you'll test your understanding of Python closures. Closures are a common feature in functional programming languages and are particularly popular in Python because they allow you to create function-based decorators.\nInteractive Quiz\nPython Code Quality: Best Practices and Tools\nIn this quiz, you'll test your understanding of Python code quality, tools, and best practices. By working through this quiz, you'll revisit the importance of producing high-quality Python code that's functional, readable, maintainable, efficient, and secure.\nInteractive Quiz\nPython Concurrency\nIn this quiz, you'll test your understanding of Python concurrency. You'll revisit the different forms of concurrency in Python, how to implement multi-threaded and asynchronous solutions for I/O-bound tasks, and how to achieve true parallelism for CPU-bound tasks.\nInteractive Quiz\nPython Conditional Statements\nTest your understanding of Python conditional statements\nInteractive Quiz\nPython Dictionaries\nTest your understanding of Python dictionaries\nInteractive Quiz\nPython Dictionary Comprehensions: How and When to Use Them\nIn this quiz, you'll test your understanding of Python dictionary comprehensions. Dictionary comprehensions are a concise and quick way to create, transform, and filter dictionaries in Python, and can significantly enhance your code's conciseness and readability.\nInteractive Quiz\nPython Dictionary Iteration\nDictionaries are one of the most important and useful data structures in Python. Learning how to iterate through a Dictionary can help you solve a wide variety of programming problems in an efficient way. Test your understanding on how you can use them better!\nInteractive Quiz\nPython Exceptions: An Introduction\nIn this quiz, you'll test your understanding of Python exceptions. You'll cover the difference between syntax errors and exceptions and learn how to raise exceptions, make assertions, and use the try and except block.\nInteractive Quiz\nPython Folium: Create Web Maps From Your Data\nPython’s Folium library gives you access to the mapping strengths of the Leaflet JavaScript library through a Python API. It allows you to create interactive geographic visualizations that you can share as a website.\nInteractive Quiz\nPython for Loops: The Pythonic Way\nIn this quiz, you'll test your understanding of Python's for loop. You'll revisit how to iterate over items in a data collection, how to use range() for a predefined number of iterations, and how to use enumerate() for index-based iteration.\nInteractive Quiz\nPython F-Strings\nIn this quiz, you'll test your knowledge of Python f-strings. With this knowledge, you'll be able to include all sorts of Python expressions inside your strings.\nInteractive Quiz\nPython GUI Programming With Tkinter\nIn this quiz, you'll test your understanding of Python GUI Programming With Tkinter, the de facto Python GUI framework. Check your knowledge of GUI programming concepts such as widgets, geometry managers, and event handlers.\nInteractive Quiz\nPython import: Advanced Techniques and Tips\nIn this quiz, you'll test your understanding of Python's import statement and how it works. You'll revisit your understanding of how to use modules and how to import modules dynamically at runtime.\nInteractive Quiz\nPython Installation and Setup\nIn this quiz, you'll test your understanding of how to install or update Python on your computer. With this knowledge, you'll be able to set up Python on various operating systems, including Windows, macOS, and Linux.\nInteractive Quiz\nPython Keywords: An Introduction\nIn this quiz, you'll test your understanding of Python keywords and soft keywords. These reserved words have specific functions and restrictions in Python, and understanding how to use them correctly is fundamental for building Python programs.\nInteractive Quiz\nPython Lambda Functions\nPython lambdas are little, anonymous functions, subject to a more restrictive but more concise syntax than regular Python functions. Test your understanding on how you can use them better!\nInteractive Quiz\nPython Logging With the Loguru Library\nThink you know Python logging? Take this quick Loguru quiz to test your knowledge of formatting, sinks, rotation, and more!\nInteractive Quiz\nPython Mappings\nIn this quiz, you'll test your understanding of the basic characteristics and operations of Python mappings. By working through this quiz, you'll revisit the key concepts and techniques of creating a custom mapping.\nInteractive Quiz\nPython Modules and Packages\nIn this quiz, you'll test your understanding of Python modules and packages, which are mechanisms that facilitate modular programming. Modular programming involves breaking a large programming task into smaller, more manageable subtasks or modules. This approach has several advantages, including simplicity, maintainability, and reusability.\nInteractive Quiz\nPython Name-Main Idiom\nTest your knowledge of Python's if __name__ == \"__main__\" idiom by answering a series of questions! You've probably encountered the name-main idiom and might have even used it in your own scripts. But did you use it correctly?\nInteractive Quiz\nPython Operators and Expressions\nTest your understanding of Python operators and expressions.\nInteractive Quiz\nPython Program Structure\nTest your understanding of Python program structure.\nInteractive Quiz\nPython Protocols: Leveraging Structural Subtyping\nTake this quiz to test your understanding of how to create and use Python protocols while providing type hints for your functions, variables, classes, and methods.\nInteractive Quiz\nPython Raw Strings\nIn this quiz, you can practice your understanding of how to use raw string literals in Python. With this knowledge, you'll be able to write cleaner and more readable regular expressions, Windows file paths, and many other string literals that deal with escape character sequences.\nInteractive Quiz\nPython's Built-in Exceptions: A Walkthrough With Examples\nIn this quiz, you'll test your understanding of Python's built-in exceptions. With this knowledge, you'll be able to effectively identify and handle these exceptions when they appear. Additionally, you'll be more familiar with how to raise some of these exceptions in your code.\nInteractive Quiz\nPython's Built-in Functions: A Complete Exploration\nTake this quiz to test your knowledge about the available built-in functions in Python. By taking this quiz, you'll deepen your understanding of how to use these functions and the common programming problems they cover, from mathematical computations to Python-specific features.\nInteractive Quiz\nPython's Bytearray\nIn this quiz, you'll test your understanding of Python's bytearray data type. By working through this quiz, you'll revisit the key concepts and uses of bytearray in Python.\nInteractive Quiz\nPython's enumerate()\nOnce you learn about for loops in Python, you know that using an index to access items in a sequence isn't very Pythonic. So what do you do when you need that index value? In this tutorial, you'll learn all about Python's built-in enumerate(), where it's used, and how you can emulate its behavior.\nInteractive Quiz\nPython Sequences: A Comprehensive Guide\nIn this quiz, you'll test your understanding of sequences in Python. You'll revisit the basic characteristics of a sequence, operations common to most sequences, special methods associated with sequences, and how to create user-defined mutable and immutable sequences.\nInteractive Quiz\nPython Set Comprehensions: How and When to Use Them\nIn this quiz, you'll test your understanding of Python set comprehensions. Set comprehensions are a concise and quick way to create, transform, and filter sets in Python. They can significantly enhance your code's conciseness and readability compared to using regular for loops to process your sets.\nInteractive Quiz\nPython Sets\nIn this quiz, you'll assess your understanding of Python's built-in set data type. You'll revisit the definition of unordered, unique, hashable collections, how to create and initialize sets, and key set operations.\nInteractive Quiz\nPython's Instance, Class, and Static Methods Demystified\nIn this quiz, you'll test your understanding of instance, class, and static methods in Python. By working through this quiz, you'll revisit the differences between these methods and how to use them effectively in your Python code.\nInteractive Quiz\nPython's Magic Methods: Leverage Their Power in Your Classes\nIn this quiz, you'll test your understanding of Python's magic methods. These special methods are fundamental to object-oriented programming in Python, allowing you to customize the behavior of your classes.\nInteractive Quiz\nPython's property(): Add Managed Attributes to Your Classes\nIn this quiz, you'll test your understanding of Python's property(). With this knowledge, you'll be able to create managed attributes in your classes, perform lazy attribute evaluation, provide computed attributes, and more.\nInteractive Quiz\nPython's raise: Effectively Raising Exceptions in Your Code\nIn this quiz, you'll test your understanding of how to raise exceptions in Python using the raise statement. This knowledge will help you handle errors and exceptional situations in your code, leading to more robust programs and higher-quality code.\nInteractive Quiz\nPython String Formatting: Available Tools and Their Features\nYou can take this quiz to test your understanding of the available tools for string formatting in Python, as well as their strengths and weaknesses. These tools include f-strings, the .format() method, and the modulo operator.\nInteractive Quiz\nPython Strings and Character Data\nThis quiz will test your understanding of Python's string data type and your knowledge about manipulating textual data with string objects. You'll cover the basics of creating strings using literals and the str() function, applying string methods, using operators and built-in functions, and more!\nInteractive Quiz\nPython's unittest: Writing Unit Tests for Your Code\nIn this quiz, you'll test your understanding of Python testing with the unittest framework from the standard library. With this knowledge, you'll be able to create basic tests, execute them, and find bugs before your users do.\nInteractive Quiz\nPython Textual: Build Beautiful UIs in the Terminal\nIn this quiz, you'll test your understanding of the Python Textual library. This library is used to create rich terminal applications and widgets. By working through this quiz, you'll reinforce your knowledge of Textual's key concepts and features.\nInteractive Quiz\nPython Threading\nThis is a quiz that will review topics covered in our An Intro To Threading tutorial.\nInteractive Quiz\nPython Thread Safety: Using a Lock and Other Techniques\nIn this quiz, you'll test your understanding of Python thread safety. You'll revisit the concepts of race conditions, locks, and other synchronization primitives in the threading module. By working through this quiz, you'll reinforce your knowledge about how to make your Python code thread-safe.\nInteractive Quiz\nPython time.sleep()\nIn this quiz, you'll revisit how to add time delays to your Python programs.\nInteractive Quiz\nPython Type Checking\nIn this quiz, you'll test your understanding of Python type checking. You'll revisit concepts such as type annotations, type hints, adding static types to code, running a static type checker, and enforcing types at runtime. This knowledge will help you develop your code more efficiently.\nInteractive Quiz\nPython Virtual Environments: A Primer\nIn this quiz, you'll test your understanding of Python virtual environments. With this knowledge, you'll be able to avoid dependency conflicts and help other developers reproduce your development environment.\nInteractive Quiz\nPython while Loops: Repeating Tasks Conditionally\nIn this quiz, you'll test your understanding of Python's while loop. This loop allows you to execute a block of code repeatedly as long as a given condition remains true. Understanding how to use while loops effectively is a crucial skill for any Python developer.\nInteractive Quiz\nReading and Writing CSV Files in Python\nThis quiz will check your understanding of what a CSV file is and the different ways to read and write to them in Python.\nInteractive Quiz\nReading and Writing Files in Python\nA quiz used for testing the user's knowledge of the topics covered in the Reading and Writing Files in Python article.\nInteractive Quiz\nReading and Writing WAV Files in Python\nIn this quiz, you can test your knowledge of handling WAV audio files in Python with the wave module. By applying what you've learned, you'll demonstrate your ability to synthesize sounds, analyze and visualize waveforms, create dynamic spectrograms, and enhance audio with special effects.\nInteractive Quiz\nRounding Numbers in Python\nTest your knowledge of rounding numbers in Python.\nInteractive Quiz\nRuff: A Modern Python Linter\nIn this quiz, you'll test your understanding of Ruff, a modern linter for Python. By working through this quiz, you'll revisit why you'd want to use Ruff to check your Python code and how it automatically fixes errors, formats your code, and provides optional configurations to enhance your linting.\nInteractive Quiz\nShallow vs Deep Copying of Python Objects\nIn this quiz, you'll test your understanding of Python's copy module, which provides tools for creating shallow and deep copies of objects. This knowledge is crucial for managing complex, mutable data structures safely and effectively.\nInteractive Quiz\nSingle and Double Underscores in Python Names\nIn this quiz, you'll test your understanding of the use of single and double underscores in Python names. This knowledge will help you differentiate between public and non-public names, avoid name clashes, and write code that looks Pythonic and consistent.\nInteractive Quiz\nSocket Programming in Python\nIn this quiz, you'll test your understanding of Python sockets. With this knowledge, you'll be able to create your own client-server applications, handle multiple connections simultaneously, and send messages and data between endpoints.\nInteractive Quiz\nSplit Your Dataset With scikit-learn's train_test_split()\nIn this quiz, you'll test your understanding of how to use the train_test_split() function from the scikit-learn library to split your dataset into subsets for unbiased evaluation in machine learning.\nInteractive Quiz\nString Interpolation in Python: Exploring Available Tools\nTake this quiz to test your understanding of the available tools for string interpolation in Python, as well as their strengths and weaknesses. These tools include f-strings, the .format() method, and the modulo operator.\nInteractive Quiz\nStructural Pattern Matching\nIn this quiz, you'll test your understanding of structural pattern matching in Python. This powerful control flow construct, introduced in Python 3.10, offers concise and readable syntax while promoting a declarative code style.\nInteractive Quiz\nSupercharge Your Classes With Python super()\nIn this quiz, you'll test your understanding of inheritance and the super() function in Python. By working through this quiz, you'll revisit the concept of inheritance, multiple inheritance, and how the super() function works in both single and multiple inheritance scenarios.\nInteractive Quiz\nSyntactic Sugar: Why Python Is Sweet and Pythonic\nYou can take this quiz to test your understanding of Python's most common pieces of syntactic sugar and how they make your code more Pythonic and readable.\nInteractive Quiz\nThe Python calendar Module\nIn this quiz, you'll test your understanding of the calendar module in Python. It'll evaluate your proficiency in manipulating, customizing, and displaying calendars directly within your terminal. By working through this quiz, you'll revisit the fundamental functions and methods provided by the calendar module.\nInteractive Quiz\nThe Python print() Function\nIn this interactive quiz, you can revisit what you know about Python's print() function. You'll also get to quiz yourself about some of its lesser-known features.\nInteractive Quiz\nThe Python print() Function\nIn this quiz, you'll test your understanding of Python's built-in print() function, covering how to format output, specify custom separators, and more.\nInteractive Quiz\nThe Python return Statement\nIn this quiz, you can practice your understanding of how to use the Python return statement when writing functions. Additionally, you'll cover some good programming practices related to the use of return. With this knowledge, you'll be able to write readable, robust, and maintainable functions in Python.\nInteractive Quiz\nThe Python Standard REPL: Try Out Code and Ideas Quickly\nIn this quiz, you'll test your understanding of the Python standard REPL. The Python REPL allows you to run Python code interactively, which is useful for testing new ideas, exploring libraries, refactoring and debugging code, and trying out examples.\nInteractive Quiz\nThe Walrus Operator: Python's Assignment Expressions\nIn this quiz, you'll test your understanding of Python's walrus operator. This operator was introduced in Python 3.8, and understanding it can help you write more concise and efficient code.\nInteractive Quiz\nUnderstanding the Python Mock Object Library\nIn this quiz, you'll test your understanding of Python's unittest.mock library. With this knowledge, you'll be able to write robust tests, create mock objects, and ensure your code is reliable and efficient.\nInteractive Quiz\nUse TorchAudio to Prepare Audio Data for Deep Learning\nTest your grasp of audio fundamentals and working with TorchAudio in Python! You'll cover loading audio datasets, transforms, and more.\nInteractive Quiz\nUsing and Creating Global Variables in Your Python Functions\nIn this quiz, you'll test your understanding of how to use global variables in Python functions. With this knowledge, you'll be able to share data across an entire program, modify and create global variables within functions, and understand when to avoid using global variables.\nInteractive Quiz\nUsing Python's .__dict__ to Work With Attributes\nIn this quiz, you'll test your understanding of Python's .__dict__ attribute and its usage in classes, instances, and functions. Acting as a namespace, this attribute maps attribute names to their corresponding values and serves as a versatile tool for metaprogramming and debugging.\nInteractive Quiz\nUsing Python's pip to Manage Your Projects' Dependencies\nIn this quiz, you'll test your understanding of Python's standard package manager, pip. You'll revisit the ideas behind pip, important commands, and how to install packages.\nInteractive Quiz\nUsing .__repr__() vs .__str__() in Python\nIn this quiz, you'll test your understanding of Python's dunder repr and dunder str special methods. These methods allow you to control how a program displays an object, making your classes more readable and easier to debug and maintain.\nInteractive Quiz\nVariables in Python: Usage and Best Practices\nIn this quiz, you'll test your understanding of variables in Python. Variables are symbolic names that refer to objects or values stored in your computer's memory, and they're essential building blocks for any Python program.\nInteractive Quiz\nWeb Automation With Python and Selenium\nIn this quiz, you'll test your understanding of using Selenium with Python for web automation. You'll revisit concepts like launching browsers, interacting with web elements, handling dynamic content, and implementing the Page Object Model (POM) design pattern.\nInteractive Quiz\nWeb Scraping With Scrapy and MongoDB\nIn this quiz, you'll test your understanding of web scraping with Scrapy and MongoDB. You'll revisit how to set up a Scrapy project, build a functional web scraper, extract data from websites, store scraped data in MongoDB, and test and debug your Scrapy web scraper.\nInteractive Quiz\nWhat Are CRUD Operations?\nIn this quiz, you'll revisit the key concepts and techniques related to CRUD operations. These operations are fundamental to any system that interacts with a database, and understanding them is crucial for effective data management.\nInteractive Quiz\nWhat Is Python's __init__.py For?\nTest your understanding of Python's __init__.py files to master how they shape your packages, enhance project structure, and keep your code clean.\nInteractive Quiz\nWhat Is the __pycache__ Folder in Python?\nIn this quiz, you'll have the opportunity to test your knowledge of the __pycache__ folder, including when, where, and why Python creates these folders.\nInteractive Quiz\nWhat Is the Python Global Interpreter Lock (GIL)?\nIn this quiz, you'll test your understanding of the Python Global Interpreter Lock (GIL). The GIL behaves like a mutex that allows only one thread to hold the control of the Python interpreter. This has advantages, but can be a performance bottleneck in CPU-bound and multi-threaded code.\nInteractive Quiz\nWhat's Lazy Evaluation in Python?\nIn this quiz, you'll test your understanding of the differences between lazy and eager evaluation in Python. By working through this quiz, you'll revisit how Python optimizes memory use and computational overhead by deciding when to compute values.\nInteractive Quiz\nWhen to Use a List Comprehension in Python\nIn this quiz, you'll test your understanding of Python list comprehensions. You'll revisit how to rewrite loops as list comprehensions, how to choose between comprehensions and loops, and how to use conditional logic in your comprehensions.\nInteractive Quiz\nWorking With JSON Data in Python\nIn this quiz, you'll test your understanding of working with JSON in Python. By working through this quiz, you'll revisit key concepts related to JSON data manipulation and handling in Python.\nInteractive Quiz\nWrite Pythonic and Clean Code With namedtuple\nIn this quiz, you'll test your understanding of Python's namedtuple() factory function from the collections module.\nSearch »\nGot feedback on our quizzes?\nLearn Python\nStart Here\nLearning Resources\nCode Mentor\nPython Reference\nSupport Center\nCourses & Paths\nLearning Paths\nQuizzes & Exercises\nBrowse Topics\nWorkshops\nBooks\nCommunity\nPodcast\nNewsletter\nCommunity Chat\nOffice Hours\nLearner Stories\nMembership\nPlans & Pricing\nTeam Plans\nFor Business\nFor Schools\nReviews\nCompany\nAbout Us\nTeam\nSponsorships\nCareers\nPress Kit\nMerch\nPrivacy Policy\n⋅\nTerms of Use\n⋅\nSecurity\n⋅\nContact\nHappy Pythoning!\n© 2012–2025 DevCademy Media Inc. DBA Real Python. All rights reserved.\nREALPYTHON™ is a trademark of DevCademy Media Inc."}
{"url": "https://realpython.com/tutorials/all", "content": "Tutorial Topics – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\n/\nJoin\nSign‑In\n— FREE Email Series —\n🐍 Python Tricks 💌\nGet Python Tricks »\n🔒 No spam. Unsubscribe any time.\nBrowse Topics\nGuided Learning Paths\nBasics\nIntermediate\nAdvanced\napi\nbest-practices\ncareer\ncommunity\ndatabases\ndata-science\ndata-structures\ndata-viz\ndevops\ndjango\ndocker\neditors\nflask\nfront-end\ngamedev\ngui\nmachine-learning\nnumpy\nprojects\npython\ntesting\ntools\nweb-dev\nweb-scraping\nPython Tutorials\nTopics\nAll Python Tutorial Topics\nSearch »\nExperience Levels\nLevel\n•\nbasics\nPython Basics\nBegin your Python journey with these beginner-friendly tutorials. Learn fundamental Python concepts to kickstart your career. This foundation will equip you with the necessary skills to further advance your budding Python programming skills.\nLevel\n•\nintermediate\nIntermediate Python Tutorials\nDig into our intermediate-level tutorials teaching new Python concepts. Expand your Python knowledge after covering the basics. These tutorials will prepare you for more complex Python projects and challenges.\nLevel\n•\nadvanced\nAdvanced Python Tutorials\nExplore advanced Python tutorials to master the Python programming language. Dive deeper into Python and enhance your coding skills. These tutorials will equip you with the advanced skills necessary for professional Python development.\nTopics\nTopic\n•\napi\nPython API Tutorials\nLearn about Python API design, interacting with APIs using Python, and how to work with REST APIs in general. This knowledge will enable you to create or integrate with web services using Python.\nTopic\n•\nbest-practices\nPython Best Practices\nLearn how to use Python features idiomatically and what sets Python apart from other languages. Discover how Python coding differs from other languages. This will help you write cleaner, more efficient, and more Pythonic code.\nTopic\n•\ncareer\nPython Career\nPractice your Python skills for coding interviews and explore Python-related topics that can boost your career as a developer. By following these tutorials, you can improve your chances of succeeding in a Python programming career.\nTopic\n•\ncommunity\nPython Community Articles\nGet to know your fellow coders through Python community articles and interviews. Dive into the Python community. This will connect you with the broader Python community, opening opportunities for collaboration and learning.\nTopic\n•\ndatabases\nPython Database Tutorials\nLearn how to interact with and manage data in Python using databases. This knowledge will enable you to build data-intensive applications and help on your journey to becoming a web developer or data analyst.\nTopic\n•\ndata-science\nPython Data Science\nExplore all Python data science tutorials. Learn how to analyze and visualize data using Python. With these skills, you can derive insights from large data sets and make data-driven decisions.\nTopic\n•\ndata-structures\nData Structures\nLearn about Python's built-in data structures and how to implement abstract structures like stacks, queues, hash tables, etc. Understanding these will enhance your problem-solving skills in Python and equip you with additional tools in your Python tool belt.\nTopic\n•\ndata-viz\nPython Data Visualization\nLearn to create data visualizations using Python in these tutorials. Explore various libraries and use them to communicate your data visually with Python. By mastering data visualization, you can effectively present complex data in an understandable format.\nTopic\n•\ndevops\nPython DevOps Tutorials\nExplore Python as a tool for development and operations (DevOps) tasks. This knowledge will allow you to streamline the process of application development, deployment, and monitoring.\nTopic\n•\ndjango\nDjango Tutorials\nLearn Django through these tutorials. Django is a high-level Python Web framework promoting rapid development and clean design. By mastering Django, you can rapidly develop complex web applications.\nTopic\n•\ndocker\nPython Docker Tutorials\nLearn about Docker, a containerization tool for creating isolated, reproducible application environments. Mastering Docker will help you manage and deploy your Python applications more efficiently.\nTopic\n•\neditors\nEditors & IDEs\nDiscover popular and niche editors and integrated development environments (IDEs) for Python. Learn about new tools or delve deeper into your favorite editor. This knowledge will streamline your Python development process.\nTopic\n•\nflask\nFlask Tutorials\nExplore Flask, a popular Python web framework, through these tutorials. Learn key aspects of Flask development. With this knowledge, you'll be able to create robust and scalable web applications using Flask.\nTopic\n•\nfront-end\nFront-end Web Development Tutorials\nLearn to make Python Web applications more user-friendly by leveraging the power of front-end and back-end technologies. These skills will enable you to create engaging and interactive web applications.\nTopic\n•\ngamedev\nPython Game Development\nBuild games using Python! Gain practical experience through tutorials and courses that cover libraries such as pygame and Arcade. Work with these resources to create engaging games using Python.\nTopic\n•\ngui\nPython GUI Programming\nLearn to create GUIs using various Python frameworks. From Tkinter to PyQT or wxPython, get started with GUI programming in Python. With these skills, you can develop user-friendly interfaces for your applications.\nTopic\n•\nmachine-learning\nPython Machine Learning\nExplore machine learning (ML) with Python through these tutorials. Learn how to implement ML algorithms in Python. With these skills, you can create intelligent systems capable of learning and making decisions.\nTopic\n•\nnumpy\nNumPy\nMaster NumPy so you can perform complex mathematical operations on large data sets. NumPy is an industry-standard Python library that supports large multidimensional arrays and matrices, and mathematical functions to operate on them.\nTopic\n•\nprojects\nPython Projects\nExplore project-based Python tutorials and gain practical coding skills. Work on Python projects that help you gain real-world programming experience. These projects include full source code and step-by-step instructions, and will make you more confident in tackling real-world coding challenges.\nTopic\n•\npython\nCore Python Tutorials\nExplore pure Python tutorials focusing on the core language features. Dive into the heart of  the Python language. Understanding these core features will give you a solid foundation for advanced Python programming.\nTopic\n•\ntesting\nPython Testing Tutorials\nLearn how to test different types of Python applications, from command-line apps to web applications. Discover best practices and techniques for testing your Python applications. This will help you build robust and bug-free applications.\nTopic\n•\ntools\nPython Development Tools\nDiscover the most common tools used in the Python ecosystem. These articles will guide you on your journey to mastering Python. Familiarity with these tools will boost your productivity and efficiency in Python development.\nTopic\n•\nweb-dev\nPython Web Development Tutorials\nLearn real-world solutions to problems in Python Web application development. These tutorials and articles cover key techniques used in the field. Armed with this knowledge, you can create modern web applications.\nTopic\n•\nweb-scraping\nPython Web Scraping Tutorials\nLearn web scraping, a technique for using Python to download and select structured data from the web. By learning this, you can automate the process of data extraction from websites.\nLearn Python\nStart Here\nLearning Resources\nCode Mentor\nPython Reference\nSupport Center\nCourses & Paths\nLearning Paths\nQuizzes & Exercises\nBrowse Topics\nWorkshops\nBooks\nCommunity\nPodcast\nNewsletter\nCommunity Chat\nOffice Hours\nLearner Stories\nMembership\nPlans & Pricing\nTeam Plans\nFor Business\nFor Schools\nReviews\nCompany\nAbout Us\nTeam\nSponsorships\nCareers\nPress Kit\nMerch\nPrivacy Policy\n⋅\nTerms of Use\n⋅\nSecurity\n⋅\nContact\nHappy Pythoning!\n© 2012–2025 DevCademy Media Inc. DBA Real Python. All rights reserved.\nREALPYTHON™ is a trademark of DevCademy Media Inc."}
{"url": "https://realpython.com/community", "content": "Join the Real Python Community Chat – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\n/\nJoin\nSign‑In\nAccess the Private Real Python\nSlack Community\nReal Python Meet & Greet at PyCon in Cleveland\nJoin the Real Python Slack chat and meet the Real Python Team and other Pythonistas looking to improve their skills.\nDiscuss your coding and career questions, celebrate your progress, vote on upcoming tutorial topics, or just hang out with us at this virtual water cooler.\nLearn more about the Real Python Community in our\nWelcome Video\nand\nCommunity Guide & Tips\n.\nWhat Members Are Saying About the Group\nThe Real Python Member’s Slack is an English-speaking Python community with members located all over the world.\nEveryone is welcome, no matter how much experience you have. If you’re friendly and like Python we’d love to have you onboard:\nRP Community Members Are Located Around the World\nWe’re also hosting regular\nOffice Hours\nlive, online Q&A sessions with the Real Python Team\nwhere you’ll meet fellow Pythonistas to chat about your learning progress, ask questions, and discuss Python tips & tricks via screen sharing.\nHow to Access the Real Python Community Slack\nTo access the members-only Slack Community you need to have an active membership subscription.\nClick the button below to activate your membership:\nBecome a Member and Join the RP Community »\nCommunity Guidelines and Code of Conduct\nReal Python is driven by our community. As such, it is vitally important that we foster an\nopen\n,\nfriendly\n, and\nwelcoming\nenvironment.\nReal Python members:\nAre considerate:\nWe’re considerate of our peers.\nAre respectful:\nWe’re respectful of others and their positions, skills, commitments, and efforts.\nShow empathy towards others:\nWe’re attentive in our communications and tactful when approaching differing views.\nGracefully accept constructive criticism:\nWhen we disagree, we are courteous in raising our issues.\nUse welcoming and inclusive language:\nWe’re accepting of all who wish to take part in our activities, fostering an environment where anyone can participate and everyone can make a difference.\nHave Fun:\nIf we aren’t having fun and enjoying each other’s company, then we’re doing it wrong!\nAs members of not only Real Python, but the broader Python Community, we’re committed to upholding the standards and guidelines of the\nPython Software Foundation’s Code of Conduct\n.\nCheck out our\nCommunity Slack Guide\nwith tips for asking questions effectively, communicating clearly, and formatting your code examples to be more readable.\nLearn Python\nStart Here\nLearning Resources\nCode Mentor\nPython Reference\nSupport Center\nCourses & Paths\nLearning Paths\nQuizzes & Exercises\nBrowse Topics\nWorkshops\nBooks\nCommunity\nPodcast\nNewsletter\nCommunity Chat\nOffice Hours\nLearner Stories\nMembership\nPlans & Pricing\nTeam Plans\nFor Business\nFor Schools\nReviews\nCompany\nAbout Us\nTeam\nSponsorships\nCareers\nPress Kit\nMerch\nPrivacy Policy\n⋅\nTerms of Use\n⋅\nSecurity\n⋅\nContact\nHappy Pythoning!\n© 2012–2025 DevCademy Media Inc. DBA Real Python. All rights reserved.\nREALPYTHON™ is a trademark of DevCademy Media Inc."}
{"url": "https://realpython.com/office-hours", "content": "Office Hours – Real Python\nStart Here\nLearn Python\nPython Tutorials →\nIn-depth articles and video courses\nLearning Paths →\nGuided study plans for accelerated learning\nQuizzes & Exercises →\nCheck your learning progress\nBrowse Topics →\nFocus on a specific area or skill level\nCommunity Chat →\nLearn with other Pythonistas\nOffice Hours →\nLive Q&A calls with Python experts\nPodcast →\nHear what’s new in the world of Python\nBooks →\nRound out your knowledge and learn offline\nReference →\nConcise definitions for common Python terms\nCode Mentor →\nBeta\nPersonalized code assistance & learning tools\nUnlock All Content →\nMore\nLearner Stories\nPython Newsletter\nPython Job Board\nMeet the Team\nBecome a Tutorial Writer\nBecome a Video Instructor\nSearch\n/\nJoin\nSign‑In\nReal Python Office Hours\nYour Real Python membership includes access to “Office Hours” live Q&A sessions\nJoin us live for the next members-only Q&A session with the Real Python Team!\nYou’ll meet fellow Pythonistas to chat about your learning progress, ask questions, and discuss Python tips & tricks via screen sharing.\nJust click the “register” button on the office hours schedule below.\nAnd in between meetings, come hang out with the hosts and fellow attendees in the #office-hours channel in our\nSlack community\n! You can use Slack to share code snippets you’d like to discuss during the live session. Check our\nSlack guide\nto learn how.\nNote:\nIf you want to get an idea what Office Hours are like, you can\ncheck out previously recorded events in the Office Hours Archive\n.\nCurrent Office Hours sessions are\nnot recorded\nanymore. Office Hours are currently\none-time events\nwhere you can ask whatever you want in a\nsafe space\n. What’s discussed won’t leave the current session, except that we can continue the discussion in the #office-hours Slack channel.\nUpcoming Events\nWhen:\nWednesday, July 16 from 9:00am–10:00am US Central (14:00–15:00 UTC)\nHosted by:\nExperts from the Real Python Team\nTopic:\nOpen Q&A\nOffice Hours are for members only. Not a member yet?\nUnlock Access to Office Hours »\nAlready have an account?\nSign-in »\nCommunity Guidelines and Code of Conduct\nReal Python is driven by our community. As such, it is vitally important that we foster an\nopen\n,\nfriendly\n, and\nwelcoming\nenvironment.\nReal Python members:\nAre considerate:\nWe’re considerate of our peers.\nAre respectful:\nWe’re respectful of others and their positions, skills, commitments, and efforts.\nShow empathy towards others:\nWe’re attentive in our communications and tactful when approaching differing views.\nGracefully accept constructive criticism:\nWhen we disagree, we are courteous in raising our issues.\nUse welcoming and inclusive language:\nWe’re accepting of all who wish to take part in our activities, fostering an environment where anyone can participate and everyone can make a difference.\nHave Fun:\nIf we aren’t having fun and enjoying each other’s company, then we’re doing it wrong!\nAs members of not only Real Python, but the broader Python Community, we’re committed to upholding the standards and guidelines of the\nPython Software Foundation’s Code of Conduct\n.\nFAQ – Frequently Asked Questions\nWhat are Office Hours?\nShow/Hide\nOffice Hours is a weekly Zoom-based online hangout with experts from the Real Python Team, where you can get help and discuss your Python questions with us and other community members. Check out our\nOffice Hours announcement post\nto learn more.\nIf you want to join, you can register at the link above to get a Zoom link.\nHow do I join?\nShow/Hide\nOffice Hours are available to all Real Python Members. Just click the button above under\nUpcoming Events\nwhere you can sign up for the next event.\nHow often can I participate?\nShow/Hide\nAs often as you want! We have several regulars that come every week!\nDo I have to say anything or turn on my camera?\nShow/Hide\nNo, you’re more than welcome to join even if you just want to listen and leave your camera and microphone turned off.\nIf you have a question you can ask it via Zoom’s text-based chat or post it in the\n#office-hours\nchannel in the\nRP Community Slack\n.\nI missed the session, are there recordings?\nShow/Hide\nOffice Hours sessions are currently\nnot recorded\n. We decided to stop recording to make Office Hours a safe space for all participants. What’s discussed won’t leave the current session, except that we can choose to continue a discussion in the #office-hours Slack channel.\nCome and join us live to be there and participate! If you’re curious, there are some older recordings in the\nOffice Hours Archive\nthat you can check out to get an idea of what Office Hours sessions are like, but it’s even better to just drop by.\nWe’re a welcoming bunch and are looking forward to seeing you there :)\nLearn Python\nStart Here\nLearning Resources\nCode Mentor\nPython Reference\nSupport Center\nCourses & Paths\nLearning Paths\nQuizzes & Exercises\nBrowse Topics\nWorkshops\nBooks\nCommunity\nPodcast\nNewsletter\nCommunity Chat\nOffice Hours\nLearner Stories\nMembership\nPlans & Pricing\nTeam Plans\nFor Business\nFor Schools\nReviews\nCompany\nAbout Us\nTeam\nSponsorships\nCareers\nPress Kit\nMerch\nPrivacy Policy\n⋅\nTerms of Use\n⋅\nSecurity\n⋅\nContact\nHappy Pythoning!\n© 2012–2025 DevCademy Media Inc. DBA Real Python. All rights reserved.\nREALPYTHON™ is a trademark of DevCademy Media Inc."}
